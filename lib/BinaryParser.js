"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @file BinaryParser.js - based on ({@link http://jsfromhell.com/classes/binary-parser Binary Parser}) by Jonas Raoni Soares Silva
 * @version 1.0.0
 * @ignore
 * 
 * @author Eduardo Astolfi <eduardo.astolfi91@gmail.com>
 * @copyright 2016 Eduardo Astolfi <eduardo.astolfi91@gmail.com>
 * @license MIT Licensed
 */

var Logger = require("./utils/Logger"),
    BinaryParserBuffer = require("./BinaryParserBuffer");

var logger = null;

// Shorcut for String.fromCharCode
var chr = String.fromCharCode;

var maxBits = [];
for (var i = 0; i < 64; i++) {
    maxBits[i] = Math.pow(2, i);
}

/**
 * BinaryParser
 * @ignore
 * 
 * @module Cursor
 * @constructor
 * @since 0.0.1
 * 
 * @classdesc Cursor class that maps a MongoDB-like cursor
 * 
 * @param {MongoPortable} db - Additional options
 * @param {Collection} collection - The collection instance
 * @param {Object|Array|String} [selection={}] - The selection for matching documents
 * @param {Object|Array|String} [fields={}] - The fields of the document to show
 * @param {Object} [options] - Database object
 * 
 * @param {Object} [options.pkFactory=null] - Object overriding the basic "ObjectId" primary key generation.
 * 
 */

var BinaryParser = function BinaryParser(bigEndian, allowExceptions) {
    _classCallCheck(this, BinaryParser);

    logger = Logger.instance;

    this.bigEndian = bigEndian;
    this.allowExceptions = allowExceptions;
};

BinaryParser.decodeFloat = function (data, precisionBits, exponentBits) {
    var b = new BinaryParserBuffer(this.bigEndian, data);

    b.checkBuffer(precisionBits + exponentBits + 1);

    var bias = maxBits[exponentBits - 1] - 1,
        signal = b.readBits(precisionBits + exponentBits, 1),
        exponent = b.readBits(precisionBits, exponentBits),
        significand = 0,
        divisor = 2,
        curByte = b.buffer.length + (-precisionBits >> 3) - 1;

    do {
        for (var byteValue = b.buffer[++curByte], startBit = precisionBits % 8 || 8, mask = 1 << startBit; mask >>= 1; byteValue & mask && (significand += 1 / divisor), divisor *= 2) {}
    } while (precisionBits -= startBit);

    if (exponent == (bias << 1) + 1) {
        if (significand) {
            return NaN;
        } else {
            if (signal) {
                return -Infinity;
            } else {
                return +Infinity;
            }
        }
    } else {
        var _mod = 0;

        if (exponent || significand) {
            _mod = exponent ? Math.pow(2, exponent - bias) * (1 + significand) : Math.pow(2, -bias + 1) * significand;
        }

        return (1 + signal * -2) * _mod;
    }

    // return exponent == ( bias << 1 ) + 1 ? significand ? NaN : signal ? -Infinity : +Infinity : ( 1 + signal * -2 ) * ( exponent || significand ? !exponent ? Math.pow( 2, -bias + 1 ) * significand : Math.pow( 2, exponent - bias ) * ( 1 + significand ) : 0 );
};

BinaryParser.decodeInt = function (data, bits, signed, forceBigEndian) {
    var b = new BinaryParserBuffer(this.bigEndian || forceBigEndian, data),
        x = b.readBits(0, bits),
        max = maxBits[bits]; //max = Math.pow( 2, bits );

    return signed && x >= max / 2 ? x - max : x;
};

BinaryParser.encodeFloat = function (data, precisionBits, exponentBits) {
    var bias = maxBits[exponentBits - 1] - 1,
        minExp = -bias + 1,
        maxExp = bias,
        minUnnormExp = minExp - precisionBits,
        n = parseFloat(data),
        status = isNaN(n) || n == -Infinity || n == +Infinity ? n : 0,
        exp = 0,
        len = 2 * bias + 1 + precisionBits + 3,
        bin = new Array(len),
        signal = (n = status !== 0 ? 0 : n) < 0,
        intPart = Math.floor(n = Math.abs(n)),
        floatPart = n - intPart,
        lastBit,
        rounded,
        result,
        i,
        j;

    for (i = len; i; bin[--i] = 0) {}

    for (i = bias + 2; intPart && i; bin[--i] = intPart % 2, intPart = Math.floor(intPart / 2)) {}

    for (i = bias + 1; floatPart > 0 && i; (bin[++i] = ((floatPart *= 2) >= 1) - 0) && --floatPart) {}

    for (i = -1; ++i < len && !bin[i];) {}

    if (bin[(lastBit = precisionBits - 1 + (i = (exp = bias + 1 - i) >= minExp && exp <= maxExp ? i + 1 : bias + 1 - (exp = minExp - 1))) + 1]) {
        if (!(rounded = bin[lastBit])) {
            for (j = lastBit + 2; !rounded && j < len; rounded = bin[j++]) {}
        }

        for (j = lastBit + 1; rounded && --j >= 0; (bin[j] = !bin[j] - 0) && (rounded = 0)) {}
    }

    for (i = i - 2 < 0 ? -1 : i - 3; ++i < len && !bin[i];) {}

    if ((exp = bias + 1 - i) >= minExp && exp <= maxExp) {
        ++i;
    } else if (exp < minExp) {
        exp != bias + 1 - len && exp < minUnnormExp && console.warn("encodeFloat::float underflow"); // TODO logger
        i = bias + 1 - (exp = minExp - 1);
    }

    if (intPart || status !== 0) {
        console.warn(intPart ? "encodeFloat::float overflow" : "encodeFloat::" + status); // TODO logger
        exp = maxExp + 1;
        i = bias + 2;

        if (status == -Infinity) {
            signal = 1;
        } else if (isNaN(status)) {
            bin[i] = 1;
        }
    }

    for (n = Math.abs(exp + bias), j = exponentBits + 1, result = ""; --j; result = n % 2 + result, n = n >>= 1) {}

    var r = [];

    for (n = 0, j = 0, i = (result = (signal ? "1" : "0") + result + bin.slice(i, i + precisionBits).join("")).length, r = []; i; j = (j + 1) % 8) {
        n += (1 << j) * result.charAt(--i);

        if (j == 7) {
            r[r.length] = String.fromCharCode(n);
            n = 0;
        }
    }

    r[r.length] = n ? String.fromCharCode(n) : "";

    return (this.bigEndian ? r.reverse() : r).join("");
};

BinaryParser.encodeInt = function (data, bits, signed, forceBigEndian) {
    var max = maxBits[bits];

    if (data >= max || data < -(max / 2)) {
        console.warn("encodeInt::overflow"); // TODO logger
        data = 0;
    }

    if (data < 0) {
        data += max;
    }

    for (var r = []; data; r[r.length] = String.fromCharCode(data % 256), data = Math.floor(data / 256)) {}

    for (bits = -(-bits >> 3) - r.length; bits--; r[r.length] = "\0") {}

    return (this.bigEndian || forceBigEndian ? r.reverse() : r).join("");
};

BinaryParser.toSmall = function (data) {
    return this.decodeInt(data, 8, true);
};
BinaryParser.fromSmall = function (data) {
    return this.encodeInt(data, 8, true);
};
BinaryParser.toByte = function (data) {
    return this.decodeInt(data, 8, false);
};
BinaryParser.fromByte = function (data) {
    return this.encodeInt(data, 8, false);
};
BinaryParser.toShort = function (data) {
    return this.decodeInt(data, 16, true);
};
BinaryParser.fromShort = function (data) {
    return this.encodeInt(data, 16, true);
};
BinaryParser.toWord = function (data) {
    return this.decodeInt(data, 16, false);
};
BinaryParser.fromWord = function (data) {
    return this.encodeInt(data, 16, false);
};
BinaryParser.toInt = function (data) {
    return this.decodeInt(data, 32, true);
};
BinaryParser.fromInt = function (data) {
    return this.encodeInt(data, 32, true);
};
BinaryParser.toLong = function (data) {
    return this.decodeInt(data, 64, true);
};
BinaryParser.fromLong = function (data) {
    return this.encodeInt(data, 64, true);
};
BinaryParser.toDWord = function (data) {
    return this.decodeInt(data, 32, false);
};
BinaryParser.fromDWord = function (data) {
    return this.encodeInt(data, 32, false);
};
BinaryParser.toQWord = function (data) {
    return this.decodeInt(data, 64, true);
};
BinaryParser.fromQWord = function (data) {
    return this.encodeInt(data, 64, true);
};
BinaryParser.toFloat = function (data) {
    return this.decodeFloat(data, 23, 8);
};
BinaryParser.fromFloat = function (data) {
    return this.encodeFloat(data, 23, 8);
};
BinaryParser.toDouble = function (data) {
    return this.decodeFloat(data, 52, 11);
};
BinaryParser.fromDouble = function (data) {
    return this.encodeFloat(data, 52, 11);
};

// Factor out the encode so it can be shared by add_header and push_int32
BinaryParser.encode_int32 = function (number, asArray) {
    var a, b, c, d, unsigned;

    unsigned = number < 0 ? number + 0x100000000 : number;
    a = Math.floor(unsigned / 0xffffff);

    unsigned &= 0xffffff;
    b = Math.floor(unsigned / 0xffff);

    unsigned &= 0xffff;
    c = Math.floor(unsigned / 0xff);

    unsigned &= 0xff;
    d = Math.floor(unsigned);

    return asArray ? [chr(a), chr(b), chr(c), chr(d)] : chr(a) + chr(b) + chr(c) + chr(d);
};

BinaryParser.encode_int64 = function (number) {
    var a, b, c, d, e, f, g, h, unsigned;

    unsigned = number < 0 ? number + 0x10000000000000000 : number;
    a = Math.floor(unsigned / 0xffffffffffffff);

    unsigned &= 0xffffffffffffff;
    b = Math.floor(unsigned / 0xffffffffffff);

    unsigned &= 0xffffffffffff;
    c = Math.floor(unsigned / 0xffffffffff);

    unsigned &= 0xffffffffff;
    d = Math.floor(unsigned / 0xffffffff);

    unsigned &= 0xffffffff;
    e = Math.floor(unsigned / 0xffffff);

    unsigned &= 0xffffff;
    f = Math.floor(unsigned / 0xffff);

    unsigned &= 0xffff;
    g = Math.floor(unsigned / 0xff);

    unsigned &= 0xff;
    h = Math.floor(unsigned);

    return chr(a) + chr(b) + chr(c) + chr(d) + chr(e) + chr(f) + chr(g) + chr(h);
};

/**
 * UTF8 methods
 */

// Take a raw binary string and return a utf8 string
BinaryParser.decode_utf8 = function (binaryStr) {
    var len = binaryStr.length,
        decoded = '',
        i = 0,
        c = 0,
        c1 = 0,
        c2 = 0,
        c3;

    while (i < len) {
        c = binaryStr.charCodeAt(i);

        if (c < 128) {
            decoded += String.fromCharCode(c);

            i++;
        } else if (c > 191 && c < 224) {
            c2 = binaryStr.charCodeAt(i + 1);
            decoded += String.fromCharCode((c & 31) << 6 | c2 & 63);

            i += 2;
        } else {
            c2 = binaryStr.charCodeAt(i + 1);
            c3 = binaryStr.charCodeAt(i + 2);
            decoded += String.fromCharCode((c & 15) << 12 | (c2 & 63) << 6 | c3 & 63);

            i += 3;
        }
    }

    return decoded;
};

// Encode a cstring
BinaryParser.encode_cstring = function (s) {
    return unescape(encodeURIComponent(s)) + BinaryParser.fromByte(0);
};

// Take a utf8 string and return a binary string
BinaryParser.encode_utf8 = function encode_utf8(s) {
    var a = "",
        c;

    for (var n = 0, len = s.length; n < len; n++) {
        c = s.charCodeAt(n);

        if (c < 128) {
            a += String.fromCharCode(c);
        } else if (c > 127 && c < 2048) {
            a += String.fromCharCode(c >> 6 | 192);
            a += String.fromCharCode(c & 63 | 128);
        } else {
            a += String.fromCharCode(c >> 12 | 224);
            a += String.fromCharCode(c >> 6 & 63 | 128);
            a += String.fromCharCode(c & 63 | 128);
        }
    }

    return a;
};

BinaryParser.hprint = function (s) {
    var number;

    for (var i = 0, len = s.length; i < len; i++) {
        if (s.charCodeAt(i) < 32) {
            number = s.charCodeAt(i) <= 15 ? "0" + s.charCodeAt(i).toString(16) : s.charCodeAt(i).toString(16);

            process.stdout.write(number + " ");
        } else {
            number = s.charCodeAt(i) <= 15 ? "0" + s.charCodeAt(i).toString(16) : s.charCodeAt(i).toString(16);

            process.stdout.write(number + " ");
        }
    }

    process.stdout.write("\n\n");

    return number;
};

BinaryParser.ilprint = function (s) {
    var number;

    for (var i = 0, len = s.length; i < len; i++) {
        if (s.charCodeAt(i) < 32) {
            number = s.charCodeAt(i) <= 15 ? "0" + s.charCodeAt(i).toString(10) : s.charCodeAt(i).toString(10);

            process.stdout.write(number + " ");
        } else {
            number = s.charCodeAt(i) <= 15 ? "0" + s.charCodeAt(i).toString(10) : s.charCodeAt(i).toString(10);

            process.stdout.write(number + " ");
        }
    }

    process.stdout.write("\n\n");

    return number;
};

BinaryParser.hlprint = function (s) {
    var number;

    for (var i = 0, len = s.length; i < len; i++) {
        if (s.charCodeAt(i) < 32) {
            number = s.charCodeAt(i) <= 15 ? "0" + s.charCodeAt(i).toString(16) : s.charCodeAt(i).toString(16);

            process.stdout.write(number + " ");
        } else {
            number = s.charCodeAt(i) <= 15 ? "0" + s.charCodeAt(i).toString(16) : s.charCodeAt(i).toString(16);

            process.stdout.write(number + " ");
        }
    }

    process.stdout.write("\n\n");

    return number;
};

module.exports = BinaryParser;
//# sourceMappingURL=data:application/json;base64,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IEJpbmFyeVBhcnNlci5qcyAtIGJhc2VkIG9uICh7QGxpbmsgaHR0cDovL2pzZnJvbWhlbGwuY29tL2NsYXNzZXMvYmluYXJ5LXBhcnNlciBCaW5hcnkgUGFyc2VyfSkgYnkgSm9uYXMgUmFvbmkgU29hcmVzIFNpbHZhXG4gKiBAdmVyc2lvbiAxLjAuMFxuICogQGlnbm9yZVxuICogXG4gKiBAYXV0aG9yIEVkdWFyZG8gQXN0b2xmaSA8ZWR1YXJkby5hc3RvbGZpOTFAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDE2IEVkdWFyZG8gQXN0b2xmaSA8ZWR1YXJkby5hc3RvbGZpOTFAZ21haWwuY29tPlxuICogQGxpY2Vuc2UgTUlUIExpY2Vuc2VkXG4gKi9cbiBcbnZhciBMb2dnZXIgPSByZXF1aXJlKFwiLi91dGlscy9Mb2dnZXJcIiksXG4gICAgQmluYXJ5UGFyc2VyQnVmZmVyID0gcmVxdWlyZShcIi4vQmluYXJ5UGFyc2VyQnVmZmVyXCIpO1xuICAgIFxudmFyIGxvZ2dlciA9IG51bGw7XG5cbi8vIFNob3JjdXQgZm9yIFN0cmluZy5mcm9tQ2hhckNvZGVcbnZhciBjaHIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG52YXIgbWF4Qml0cyA9IFtdO1xuZm9yICh2YXIgaSA9IDA7IGkgPCA2NDsgaSsrKSB7XG4gICAgbWF4Qml0c1tpXSA9IE1hdGgucG93KDIsIGkpO1xufVxuXG4vKipcbiAqIEJpbmFyeVBhcnNlclxuICogQGlnbm9yZVxuICogXG4gKiBAbW9kdWxlIEN1cnNvclxuICogQGNvbnN0cnVjdG9yXG4gKiBAc2luY2UgMC4wLjFcbiAqIFxuICogQGNsYXNzZGVzYyBDdXJzb3IgY2xhc3MgdGhhdCBtYXBzIGEgTW9uZ29EQi1saWtlIGN1cnNvclxuICogXG4gKiBAcGFyYW0ge01vbmdvUG9ydGFibGV9IGRiIC0gQWRkaXRpb25hbCBvcHRpb25zXG4gKiBAcGFyYW0ge0NvbGxlY3Rpb259IGNvbGxlY3Rpb24gLSBUaGUgY29sbGVjdGlvbiBpbnN0YW5jZVxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl8U3RyaW5nfSBbc2VsZWN0aW9uPXt9XSAtIFRoZSBzZWxlY3Rpb24gZm9yIG1hdGNoaW5nIGRvY3VtZW50c1xuICogQHBhcmFtIHtPYmplY3R8QXJyYXl8U3RyaW5nfSBbZmllbGRzPXt9XSAtIFRoZSBmaWVsZHMgb2YgdGhlIGRvY3VtZW50IHRvIHNob3dcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBEYXRhYmFzZSBvYmplY3RcbiAqIFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLnBrRmFjdG9yeT1udWxsXSAtIE9iamVjdCBvdmVycmlkaW5nIHRoZSBiYXNpYyBcIk9iamVjdElkXCIgcHJpbWFyeSBrZXkgZ2VuZXJhdGlvbi5cbiAqIFxuICovXG5jbGFzcyBCaW5hcnlQYXJzZXIge1xuICAgIGNvbnN0cnVjdG9yKGJpZ0VuZGlhbiwgYWxsb3dFeGNlcHRpb25zKSB7XG4gICAgICAgIGxvZ2dlciA9IExvZ2dlci5pbnN0YW5jZTtcbiAgICBcbiAgICAgICAgdGhpcy5iaWdFbmRpYW4gPSBiaWdFbmRpYW47XG4gICAgICAgIHRoaXMuYWxsb3dFeGNlcHRpb25zID0gYWxsb3dFeGNlcHRpb25zO1xuICAgIH1cbiAgICBcbiAgICBcbn1cblxuQmluYXJ5UGFyc2VyLmRlY29kZUZsb2F0ID0gZnVuY3Rpb24gKGRhdGEsIHByZWNpc2lvbkJpdHMsIGV4cG9uZW50Qml0cykge1xuICAgIHZhciBiID0gbmV3IEJpbmFyeVBhcnNlckJ1ZmZlcih0aGlzLmJpZ0VuZGlhbiwgZGF0YSk7XG5cbiAgICBiLmNoZWNrQnVmZmVyKHByZWNpc2lvbkJpdHMgKyBleHBvbmVudEJpdHMgKyAxKTtcblxuICAgIHZhciBiaWFzID0gbWF4Qml0c1tleHBvbmVudEJpdHMgLSAxXSAtIDEsXG4gICAgICAgIHNpZ25hbCA9IGIucmVhZEJpdHMocHJlY2lzaW9uQml0cyArIGV4cG9uZW50Qml0cywgMSksXG4gICAgICAgIGV4cG9uZW50ID0gYi5yZWFkQml0cyhwcmVjaXNpb25CaXRzLCBleHBvbmVudEJpdHMpLFxuICAgICAgICBzaWduaWZpY2FuZCA9IDAsXG4gICAgICAgIGRpdmlzb3IgPSAyLFxuICAgICAgICBjdXJCeXRlID0gYi5idWZmZXIubGVuZ3RoICsgKC1wcmVjaXNpb25CaXRzID4+IDMpIC0gMTtcblxuICAgIGRvIHtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICAgIHZhciBieXRlVmFsdWUgPSBiLmJ1ZmZlclsgKytjdXJCeXRlIF0sIHN0YXJ0Qml0ID0gcHJlY2lzaW9uQml0cyAlIDggfHwgOCwgbWFzayA9IDEgPDwgc3RhcnRCaXQ7XG4gICAgICAgICAgICBtYXNrID4+PSAxOyBcbiAgICAgICAgICAgICggYnl0ZVZhbHVlICYgbWFzayApICYmICggc2lnbmlmaWNhbmQgKz0gMSAvIGRpdmlzb3IgKSwgZGl2aXNvciAqPSAyIFxuICAgICAgICApO1xuICAgIH0gd2hpbGUgKHByZWNpc2lvbkJpdHMgLT0gc3RhcnRCaXQpO1xuICAgIFxuICAgIFxuXG4gICAgaWYgKCBleHBvbmVudCA9PSAoIGJpYXMgPDwgMSApICsgMSApIHtcbiAgICBcdGlmIChzaWduaWZpY2FuZCkge1xuICAgIFx0XHRyZXR1cm4gTmFOO1xuICAgIFx0fSBlbHNlIHtcbiAgICBcdFx0aWYgKHNpZ25hbCkge1xuICAgIFx0XHRcdHJldHVybiAtSW5maW5pdHk7XG4gICAgXHRcdH0gZWxzZSB7XG4gICAgXHRcdFx0cmV0dXJuICtJbmZpbml0eTtcbiAgICBcdFx0fVxuICAgIFx0fVxuICAgIH0gZWxzZSB7XG4gICAgXHR2YXIgX21vZCA9IDA7XG4gICAgXHRcbiAgICBcdGlmIChleHBvbmVudCB8fCBzaWduaWZpY2FuZCkge1xuICAgIFx0ICAgIF9tb2QgPSBleHBvbmVudCA/IE1hdGgucG93KCAyLCBleHBvbmVudCAtIGJpYXMgKSAqICggMSArIHNpZ25pZmljYW5kICkgOiBNYXRoLnBvdyggMiwgLWJpYXMgKyAxICkgKiBzaWduaWZpY2FuZDtcbiAgICBcdH1cbiAgICBcdFxuICAgIFx0cmV0dXJuICggMSArIHNpZ25hbCAqIC0yICkgKiAoX21vZCk7XG4gICAgfVxuXG5cbiAgICAvLyByZXR1cm4gZXhwb25lbnQgPT0gKCBiaWFzIDw8IDEgKSArIDEgPyBzaWduaWZpY2FuZCA/IE5hTiA6IHNpZ25hbCA/IC1JbmZpbml0eSA6ICtJbmZpbml0eSA6ICggMSArIHNpZ25hbCAqIC0yICkgKiAoIGV4cG9uZW50IHx8IHNpZ25pZmljYW5kID8gIWV4cG9uZW50ID8gTWF0aC5wb3coIDIsIC1iaWFzICsgMSApICogc2lnbmlmaWNhbmQgOiBNYXRoLnBvdyggMiwgZXhwb25lbnQgLSBiaWFzICkgKiAoIDEgKyBzaWduaWZpY2FuZCApIDogMCApO1xufTtcblxuQmluYXJ5UGFyc2VyLmRlY29kZUludCA9IGZ1bmN0aW9uIChkYXRhLCBiaXRzLCBzaWduZWQsIGZvcmNlQmlnRW5kaWFuKSB7XG4gICAgdmFyIGIgPSBuZXcgQmluYXJ5UGFyc2VyQnVmZmVyKHRoaXMuYmlnRW5kaWFuIHx8IGZvcmNlQmlnRW5kaWFuLCBkYXRhKSxcbiAgICAgICAgeCA9IGIucmVhZEJpdHMoMCwgYml0cyksXG4gICAgICAgIG1heCA9IG1heEJpdHNbYml0c107IC8vbWF4ID0gTWF0aC5wb3coIDIsIGJpdHMgKTtcblxuICAgIHJldHVybiBzaWduZWQgJiYgeCA+PSBtYXggLyAyID8geCAtIG1heCA6IHg7XG59O1xuXG5CaW5hcnlQYXJzZXIuZW5jb2RlRmxvYXQgPSBmdW5jdGlvbiAoZGF0YSwgcHJlY2lzaW9uQml0cywgZXhwb25lbnRCaXRzKSB7XG4gICAgdmFyIGJpYXMgPSBtYXhCaXRzW2V4cG9uZW50Qml0cyAtIDFdIC0gMSxcbiAgICAgICAgbWluRXhwID0gLWJpYXMgKyAxLFxuICAgICAgICBtYXhFeHAgPSBiaWFzLFxuICAgICAgICBtaW5Vbm5vcm1FeHAgPSBtaW5FeHAgLSBwcmVjaXNpb25CaXRzLFxuICAgICAgICBuID0gcGFyc2VGbG9hdChkYXRhKSxcbiAgICAgICAgc3RhdHVzID0gaXNOYU4obikgfHwgbiA9PSAtSW5maW5pdHkgfHwgbiA9PSArSW5maW5pdHkgPyBuIDogMCxcbiAgICAgICAgZXhwID0gMCxcbiAgICAgICAgbGVuID0gMiAqIGJpYXMgKyAxICsgcHJlY2lzaW9uQml0cyArIDMsXG4gICAgICAgIGJpbiA9IG5ldyBBcnJheShsZW4pLFxuICAgICAgICBzaWduYWwgPSAobiA9IHN0YXR1cyAhPT0gMCA/IDAgOiBuKSA8IDAsXG4gICAgICAgIGludFBhcnQgPSBNYXRoLmZsb29yKG4gPSBNYXRoLmFicyhuKSksXG4gICAgICAgIGZsb2F0UGFydCA9IG4gLSBpbnRQYXJ0LFxuICAgICAgICBsYXN0Qml0LFxuICAgICAgICByb3VuZGVkLFxuICAgICAgICByZXN1bHQsXG4gICAgICAgIGksXG4gICAgICAgIGo7XG5cblxuICAgIGZvciAoaSA9IGxlbjsgaTsgYmluWy0taV0gPSAwKTtcbiAgICBcbiAgICBmb3IgKGkgPSBiaWFzICsgMjsgaW50UGFydCAmJiBpOyBiaW5bLS1pXSA9IGludFBhcnQgJSAyLCBpbnRQYXJ0ID0gTWF0aC5mbG9vcihpbnRQYXJ0IC8gMikpO1xuICAgIFxuICAgIGZvciAoaSA9IGJpYXMgKyAxOyBmbG9hdFBhcnQgPiAwICYmIGk7IChiaW5bKytpXSA9ICgoZmxvYXRQYXJ0ICo9IDIpID49IDEpIC0gMCApICYmIC0tZmxvYXRQYXJ0KTtcbiAgICBcbiAgICBmb3IgKGkgPSAtMTsgKytpIDwgbGVuICYmICFiaW5baV07KTtcbiAgXG4gICAgaWYgKGJpblsobGFzdEJpdCA9IHByZWNpc2lvbkJpdHMgLSAxICsgKGkgPSAoZXhwID0gYmlhcyArIDEgLSBpKSA+PSBtaW5FeHAgJiYgZXhwIDw9IG1heEV4cCA/IGkgKyAxIDogYmlhcyArIDEgLSAoZXhwID0gbWluRXhwIC0gMSkpKSArIDFdKSB7XG4gICAgICAgIGlmICghKHJvdW5kZWQgPSBiaW5bbGFzdEJpdF0pKSB7XG4gICAgICAgICAgICBmb3IgKGogPSBsYXN0Qml0ICsgMjsgIXJvdW5kZWQgJiYgaiA8IGxlbjsgcm91bmRlZCA9IGJpbltqKytdKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZm9yIChqID0gbGFzdEJpdCArIDE7IHJvdW5kZWQgJiYgLS1qID49IDA7IChiaW5bal0gPSAhYmluW2pdIC0gMCkgJiYgKHJvdW5kZWQgPSAwKSk7XG4gICAgfVxuICBcbiAgICBmb3IgKGkgPSBpIC0gMiA8IDAgPyAtMSA6IGkgLSAzOyArK2kgPCBsZW4gJiYgIWJpbltpXTspO1xuICAgIFxuICAgIGlmICgoZXhwID0gYmlhcyArIDEgLSBpKSA+PSBtaW5FeHAgJiYgZXhwIDw9IG1heEV4cCkge1xuICAgICAgICArK2k7XG4gICAgfSBlbHNlIGlmIChleHAgPCBtaW5FeHApIHtcbiAgICAgICAgZXhwICE9IGJpYXMgKyAxIC0gbGVuICYmIGV4cCA8IG1pblVubm9ybUV4cCAmJiBjb25zb2xlLndhcm4oXCJlbmNvZGVGbG9hdDo6ZmxvYXQgdW5kZXJmbG93XCIpOyAgICAvLyBUT0RPIGxvZ2dlclxuICAgICAgICBpID0gYmlhcyArIDEgLSAoZXhwID0gbWluRXhwIC0gMSk7XG4gICAgfVxuICAgIFxuICAgIGlmIChpbnRQYXJ0IHx8IHN0YXR1cyAhPT0gMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oaW50UGFydCA/IFwiZW5jb2RlRmxvYXQ6OmZsb2F0IG92ZXJmbG93XCIgOiBcImVuY29kZUZsb2F0OjpcIiArIHN0YXR1cyk7ICAgIC8vIFRPRE8gbG9nZ2VyXG4gICAgICAgIGV4cCA9IG1heEV4cCArIDE7XG4gICAgICAgIGkgPSBiaWFzICsgMjtcbiAgICBcbiAgICAgICAgaWYgKHN0YXR1cyA9PSAtSW5maW5pdHkpIHtcbiAgICAgICAgICAgIHNpZ25hbCA9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOYU4oc3RhdHVzKSkge1xuICAgICAgICAgICAgYmluW2ldID0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgXG4gICAgZm9yIChuID0gTWF0aC5hYnMoZXhwICsgYmlhcyksIGogPSBleHBvbmVudEJpdHMgKyAxLCByZXN1bHQgPSBcIlwiOyAtLWo7IHJlc3VsdCA9IChuICUgMikgKyByZXN1bHQsIG4gPSBuID4+PSAxKTtcbiAgICBcbiAgICBsZXQgciA9IFtdO1xuICAgIFxuICAgIGZvciAobiA9IDAsIGogPSAwLCBpID0gKHJlc3VsdCA9IChzaWduYWwgPyBcIjFcIiA6IFwiMFwiKSArIHJlc3VsdCArIGJpbi5zbGljZShpLCBpICsgcHJlY2lzaW9uQml0cykuam9pbihcIlwiKSkubGVuZ3RoLCByID0gW107IGk7IGogPSAoaiArIDEpICUgOCkge1xuICAgICAgICBuICs9ICgxIDw8IGopICogcmVzdWx0LmNoYXJBdCgtLWkpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGogPT0gNykge1xuICAgICAgICAgICAgcltyLmxlbmd0aF0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKG4pO1xuICAgICAgICAgICAgbiA9IDA7XG4gICAgICAgIH1cbiAgICB9XG4gIFxuICAgIHJbci5sZW5ndGhdID0gbiA/IFN0cmluZy5mcm9tQ2hhckNvZGUobikgOiBcIlwiO1xuICBcbiAgICByZXR1cm4gKHRoaXMuYmlnRW5kaWFuID8gci5yZXZlcnNlKCkgOiByKS5qb2luKFwiXCIpO1xufTtcblxuQmluYXJ5UGFyc2VyLmVuY29kZUludCA9IGZ1bmN0aW9uIChkYXRhLCBiaXRzLCBzaWduZWQsIGZvcmNlQmlnRW5kaWFuKSB7XG4gICAgdmFyIG1heCA9IG1heEJpdHNbYml0c107XG4gICAgXG4gICAgaWYgKGRhdGEgPj0gbWF4IHx8IGRhdGEgPCAtKG1heCAvIDIpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcImVuY29kZUludDo6b3ZlcmZsb3dcIik7ICAgIC8vIFRPRE8gbG9nZ2VyXG4gICAgICAgIGRhdGEgPSAwO1xuICAgIH1cbiAgICBcbiAgICBpZiAoZGF0YSA8IDApIHtcbiAgICAgICAgZGF0YSArPSBtYXg7XG4gICAgfVxuICAgIFxuICAgIGZvciAodmFyIHIgPSBbXTsgZGF0YTsgcltyLmxlbmd0aF0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGRhdGEgJSAyNTYpLCBkYXRhID0gTWF0aC5mbG9vcihkYXRhIC8gMjU2KSk7XG4gICAgXG4gICAgZm9yIChiaXRzID0gLSgtYml0cyA+PiAzKSAtIHIubGVuZ3RoOyBiaXRzLS07IHJbci5sZW5ndGhdID0gXCJcXDBcIik7XG4gICAgXG4gICAgcmV0dXJuICgodGhpcy5iaWdFbmRpYW4gfHwgZm9yY2VCaWdFbmRpYW4pID8gci5yZXZlcnNlKCkgOiByKS5qb2luKFwiXCIpO1xufTtcblxuQmluYXJ5UGFyc2VyLnRvU21hbGwgICAgPSBmdW5jdGlvbiggZGF0YSApeyByZXR1cm4gdGhpcy5kZWNvZGVJbnQoIGRhdGEsICA4LCB0cnVlICApOyB9O1xuQmluYXJ5UGFyc2VyLmZyb21TbWFsbCAgPSBmdW5jdGlvbiggZGF0YSApeyByZXR1cm4gdGhpcy5lbmNvZGVJbnQoIGRhdGEsICA4LCB0cnVlICApOyB9O1xuQmluYXJ5UGFyc2VyLnRvQnl0ZSAgICAgPSBmdW5jdGlvbiggZGF0YSApeyByZXR1cm4gdGhpcy5kZWNvZGVJbnQoIGRhdGEsICA4LCBmYWxzZSApOyB9O1xuQmluYXJ5UGFyc2VyLmZyb21CeXRlICAgPSBmdW5jdGlvbiggZGF0YSApeyByZXR1cm4gdGhpcy5lbmNvZGVJbnQoIGRhdGEsICA4LCBmYWxzZSApOyB9O1xuQmluYXJ5UGFyc2VyLnRvU2hvcnQgICAgPSBmdW5jdGlvbiggZGF0YSApeyByZXR1cm4gdGhpcy5kZWNvZGVJbnQoIGRhdGEsIDE2LCB0cnVlICApOyB9O1xuQmluYXJ5UGFyc2VyLmZyb21TaG9ydCAgPSBmdW5jdGlvbiggZGF0YSApeyByZXR1cm4gdGhpcy5lbmNvZGVJbnQoIGRhdGEsIDE2LCB0cnVlICApOyB9O1xuQmluYXJ5UGFyc2VyLnRvV29yZCAgICAgPSBmdW5jdGlvbiggZGF0YSApeyByZXR1cm4gdGhpcy5kZWNvZGVJbnQoIGRhdGEsIDE2LCBmYWxzZSApOyB9O1xuQmluYXJ5UGFyc2VyLmZyb21Xb3JkICAgPSBmdW5jdGlvbiggZGF0YSApeyByZXR1cm4gdGhpcy5lbmNvZGVJbnQoIGRhdGEsIDE2LCBmYWxzZSApOyB9O1xuQmluYXJ5UGFyc2VyLnRvSW50ICAgICAgPSBmdW5jdGlvbiggZGF0YSApeyByZXR1cm4gdGhpcy5kZWNvZGVJbnQoIGRhdGEsIDMyLCB0cnVlICApOyB9O1xuQmluYXJ5UGFyc2VyLmZyb21JbnQgICAgPSBmdW5jdGlvbiggZGF0YSApeyByZXR1cm4gdGhpcy5lbmNvZGVJbnQoIGRhdGEsIDMyLCB0cnVlICApOyB9O1xuQmluYXJ5UGFyc2VyLnRvTG9uZyAgICAgPSBmdW5jdGlvbiggZGF0YSApeyByZXR1cm4gdGhpcy5kZWNvZGVJbnQoIGRhdGEsIDY0LCB0cnVlICApOyB9O1xuQmluYXJ5UGFyc2VyLmZyb21Mb25nICAgPSBmdW5jdGlvbiggZGF0YSApeyByZXR1cm4gdGhpcy5lbmNvZGVJbnQoIGRhdGEsIDY0LCB0cnVlICApOyB9O1xuQmluYXJ5UGFyc2VyLnRvRFdvcmQgICAgPSBmdW5jdGlvbiggZGF0YSApeyByZXR1cm4gdGhpcy5kZWNvZGVJbnQoIGRhdGEsIDMyLCBmYWxzZSApOyB9O1xuQmluYXJ5UGFyc2VyLmZyb21EV29yZCAgPSBmdW5jdGlvbiggZGF0YSApeyByZXR1cm4gdGhpcy5lbmNvZGVJbnQoIGRhdGEsIDMyLCBmYWxzZSApOyB9O1xuQmluYXJ5UGFyc2VyLnRvUVdvcmQgICAgPSBmdW5jdGlvbiggZGF0YSApeyByZXR1cm4gdGhpcy5kZWNvZGVJbnQoIGRhdGEsIDY0LCB0cnVlICk7IH07XG5CaW5hcnlQYXJzZXIuZnJvbVFXb3JkICA9IGZ1bmN0aW9uKCBkYXRhICl7IHJldHVybiB0aGlzLmVuY29kZUludCggZGF0YSwgNjQsIHRydWUgKTsgfTtcbkJpbmFyeVBhcnNlci50b0Zsb2F0ICAgID0gZnVuY3Rpb24oIGRhdGEgKXsgcmV0dXJuIHRoaXMuZGVjb2RlRmxvYXQoIGRhdGEsIDIzLCA4ICAgKTsgfTtcbkJpbmFyeVBhcnNlci5mcm9tRmxvYXQgID0gZnVuY3Rpb24oIGRhdGEgKXsgcmV0dXJuIHRoaXMuZW5jb2RlRmxvYXQoIGRhdGEsIDIzLCA4ICAgKTsgfTtcbkJpbmFyeVBhcnNlci50b0RvdWJsZSAgID0gZnVuY3Rpb24oIGRhdGEgKXsgcmV0dXJuIHRoaXMuZGVjb2RlRmxvYXQoIGRhdGEsIDUyLCAxMSAgKTsgfTtcbkJpbmFyeVBhcnNlci5mcm9tRG91YmxlID0gZnVuY3Rpb24oIGRhdGEgKXsgcmV0dXJuIHRoaXMuZW5jb2RlRmxvYXQoIGRhdGEsIDUyLCAxMSAgKTsgfTtcblxuLy8gRmFjdG9yIG91dCB0aGUgZW5jb2RlIHNvIGl0IGNhbiBiZSBzaGFyZWQgYnkgYWRkX2hlYWRlciBhbmQgcHVzaF9pbnQzMlxuQmluYXJ5UGFyc2VyLmVuY29kZV9pbnQzMiA9IGZ1bmN0aW9uIChudW1iZXIsIGFzQXJyYXkpIHtcbiAgICB2YXIgYSwgYiwgYywgZCwgdW5zaWduZWQ7XG4gICAgXG4gICAgdW5zaWduZWQgPSAobnVtYmVyIDwgMCkgPyAobnVtYmVyICsgMHgxMDAwMDAwMDApIDogbnVtYmVyO1xuICAgIGEgPSBNYXRoLmZsb29yKHVuc2lnbmVkIC8gMHhmZmZmZmYpO1xuICAgIFxuICAgIHVuc2lnbmVkICY9IDB4ZmZmZmZmO1xuICAgIGIgPSBNYXRoLmZsb29yKHVuc2lnbmVkIC8gMHhmZmZmKTtcbiAgICBcbiAgICB1bnNpZ25lZCAmPSAweGZmZmY7XG4gICAgYyA9IE1hdGguZmxvb3IodW5zaWduZWQgLyAweGZmKTtcbiAgICBcbiAgICB1bnNpZ25lZCAmPSAweGZmO1xuICAgIGQgPSBNYXRoLmZsb29yKHVuc2lnbmVkKTtcbiAgICBcbiAgICByZXR1cm4gYXNBcnJheSA/IFtjaHIoYSksIGNocihiKSwgY2hyKGMpLCBjaHIoZCldIDogY2hyKGEpICsgY2hyKGIpICsgY2hyKGMpICsgY2hyKGQpO1xufTtcblxuQmluYXJ5UGFyc2VyLmVuY29kZV9pbnQ2NCA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICB2YXIgYSwgYiwgYywgZCwgZSwgZiwgZywgaCwgdW5zaWduZWQ7XG4gICAgXG4gICAgdW5zaWduZWQgPSAobnVtYmVyIDwgMCkgPyAobnVtYmVyICsgMHgxMDAwMDAwMDAwMDAwMDAwMCkgOiBudW1iZXI7XG4gICAgYSA9IE1hdGguZmxvb3IodW5zaWduZWQgLyAweGZmZmZmZmZmZmZmZmZmKTtcbiAgICBcbiAgICB1bnNpZ25lZCAmPSAweGZmZmZmZmZmZmZmZmZmO1xuICAgIGIgPSBNYXRoLmZsb29yKHVuc2lnbmVkIC8gMHhmZmZmZmZmZmZmZmYpO1xuICAgIFxuICAgIHVuc2lnbmVkICY9IDB4ZmZmZmZmZmZmZmZmO1xuICAgIGMgPSBNYXRoLmZsb29yKHVuc2lnbmVkIC8gMHhmZmZmZmZmZmZmKTtcbiAgICBcbiAgICB1bnNpZ25lZCAmPSAweGZmZmZmZmZmZmY7XG4gICAgZCA9IE1hdGguZmxvb3IodW5zaWduZWQgLyAweGZmZmZmZmZmKTtcbiAgICBcbiAgICB1bnNpZ25lZCAmPSAweGZmZmZmZmZmO1xuICAgIGUgPSBNYXRoLmZsb29yKHVuc2lnbmVkIC8gMHhmZmZmZmYpO1xuICAgIFxuICAgIHVuc2lnbmVkICY9IDB4ZmZmZmZmO1xuICAgIGYgPSBNYXRoLmZsb29yKHVuc2lnbmVkIC8gMHhmZmZmKTtcbiAgICBcbiAgICB1bnNpZ25lZCAmPSAweGZmZmY7XG4gICAgZyA9IE1hdGguZmxvb3IodW5zaWduZWQgLyAweGZmKTtcbiAgICBcbiAgICB1bnNpZ25lZCAmPSAweGZmO1xuICAgIGggPSBNYXRoLmZsb29yKHVuc2lnbmVkKTtcbiAgICBcbiAgICByZXR1cm4gY2hyKGEpICsgY2hyKGIpICsgY2hyKGMpICsgY2hyKGQpICsgY2hyKGUpICsgY2hyKGYpICsgY2hyKGcpICsgY2hyKGgpO1xufTtcblxuLyoqXG4gKiBVVEY4IG1ldGhvZHNcbiAqL1xuXG4vLyBUYWtlIGEgcmF3IGJpbmFyeSBzdHJpbmcgYW5kIHJldHVybiBhIHV0Zjggc3RyaW5nXG5CaW5hcnlQYXJzZXIuZGVjb2RlX3V0ZjggPSBmdW5jdGlvbiAoYmluYXJ5U3RyKSB7XG4gICAgdmFyIGxlbiA9IGJpbmFyeVN0ci5sZW5ndGgsXG4gICAgICAgIGRlY29kZWQgPSAnJyxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIGMgPSAwLFxuICAgICAgICBjMSA9IDAsXG4gICAgICAgIGMyID0gMCxcbiAgICAgICAgYzM7XG4gICAgXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgYyA9IGJpbmFyeVN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGMgPCAxMjgpIHtcbiAgICAgICAgICAgIGRlY29kZWQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9IGVsc2UgaWYgKChjID4gMTkxKSAmJiAoYyA8IDIyNCkpIHtcbiAgICAgICAgICAgIGMyID0gYmluYXJ5U3RyLmNoYXJDb2RlQXQoaSsxKTtcbiAgICAgICAgICAgIGRlY29kZWQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMgJiAzMSkgPDwgNikgfCAoYzIgJiA2MykpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpICs9IDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjMiA9IGJpbmFyeVN0ci5jaGFyQ29kZUF0KGkrMSk7XG4gICAgICAgICAgICBjMyA9IGJpbmFyeVN0ci5jaGFyQ29kZUF0KGkrMik7XG4gICAgICAgICAgICBkZWNvZGVkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjICYgMTUpIDw8IDEyKSB8ICgoYzIgJiA2MykgPDwgNikgfCAoYzMgJiA2MykpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpICs9IDM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGRlY29kZWQ7XG59O1xuXG4vLyBFbmNvZGUgYSBjc3RyaW5nXG5CaW5hcnlQYXJzZXIuZW5jb2RlX2NzdHJpbmcgPSBmdW5jdGlvbiAocykge1xuICAgIHJldHVybiB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQocykpICsgQmluYXJ5UGFyc2VyLmZyb21CeXRlKDApO1xufTtcblxuLy8gVGFrZSBhIHV0Zjggc3RyaW5nIGFuZCByZXR1cm4gYSBiaW5hcnkgc3RyaW5nXG5CaW5hcnlQYXJzZXIuZW5jb2RlX3V0ZjggPSBmdW5jdGlvbiBlbmNvZGVfdXRmOCAocykge1xuICAgIHZhciBhID0gXCJcIixcbiAgICAgICAgYztcblxuICAgIGZvciAodmFyIG4gPSAwLCBsZW4gPSBzLmxlbmd0aDsgbiA8IGxlbjsgbisrKSB7XG4gICAgICAgIGMgPSBzLmNoYXJDb2RlQXQobik7XG5cbiAgICAgICAgaWYgKGMgPCAxMjgpIHtcbiAgICAgICAgICAgIGEgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgICAgICAgfSBlbHNlIGlmICgoYyA+IDEyNykgJiYgKGMgPCAyMDQ4KSkge1xuICAgICAgICAgICAgYSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChjPj42KSB8IDE5MikgO1xuICAgICAgICAgICAgYSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChjJjYzKSB8IDEyOCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGM+PjEyKSB8IDIyNCk7XG4gICAgICAgICAgICBhICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjPj42KSAmIDYzKSB8IDEyOCk7XG4gICAgICAgICAgICBhICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGMmNjMpIHwgMTI4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhO1xufTtcblxuQmluYXJ5UGFyc2VyLmhwcmludCA9IGZ1bmN0aW9uIChzKSB7XG4gICAgdmFyIG51bWJlcjtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChzLmNoYXJDb2RlQXQoaSkgPCAzMikge1xuICAgICAgICAgICAgbnVtYmVyID0gcy5jaGFyQ29kZUF0KGkpIDw9IDE1ID8gXCIwXCIgKyBzLmNoYXJDb2RlQXQoaSkudG9TdHJpbmcoMTYpIDogcy5jaGFyQ29kZUF0KGkpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUobnVtYmVyICsgXCIgXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbnVtYmVyID0gcy5jaGFyQ29kZUF0KGkpIDw9IDE1ID8gXCIwXCIgKyBzLmNoYXJDb2RlQXQoaSkudG9TdHJpbmcoMTYpIDogcy5jaGFyQ29kZUF0KGkpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUobnVtYmVyICsgXCIgXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKFwiXFxuXFxuXCIpO1xuICAgIFxuICAgIHJldHVybiBudW1iZXI7XG59O1xuXG5CaW5hcnlQYXJzZXIuaWxwcmludCA9IGZ1bmN0aW9uIChzKSB7XG4gICAgdmFyIG51bWJlcjtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChzLmNoYXJDb2RlQXQoaSkgPCAzMikge1xuICAgICAgICAgICAgbnVtYmVyID0gcy5jaGFyQ29kZUF0KGkpIDw9IDE1ID8gXCIwXCIgKyBzLmNoYXJDb2RlQXQoaSkudG9TdHJpbmcoMTApIDogcy5jaGFyQ29kZUF0KGkpLnRvU3RyaW5nKDEwKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUobnVtYmVyICsgXCIgXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbnVtYmVyID0gcy5jaGFyQ29kZUF0KGkpIDw9IDE1ID8gXCIwXCIgKyBzLmNoYXJDb2RlQXQoaSkudG9TdHJpbmcoMTApIDogcy5jaGFyQ29kZUF0KGkpLnRvU3RyaW5nKDEwKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUobnVtYmVyICsgXCIgXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKFwiXFxuXFxuXCIpO1xuICAgIFxuICAgIHJldHVybiBudW1iZXI7XG59O1xuXG5CaW5hcnlQYXJzZXIuaGxwcmludCA9IGZ1bmN0aW9uIChzKSB7XG4gICAgdmFyIG51bWJlcjtcbiAgICBcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAocy5jaGFyQ29kZUF0KGkpIDwgMzIpIHtcbiAgICAgICAgICAgIG51bWJlciA9IHMuY2hhckNvZGVBdChpKSA8PSAxNSA/IFwiMFwiICsgcy5jaGFyQ29kZUF0KGkpLnRvU3RyaW5nKDE2KSA6IHMuY2hhckNvZGVBdChpKS50b1N0cmluZygxNik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKG51bWJlciArIFwiIFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG51bWJlciA9IHMuY2hhckNvZGVBdChpKSA8PSAxNSA/IFwiMFwiICsgcy5jaGFyQ29kZUF0KGkpLnRvU3RyaW5nKDE2KSA6IHMuY2hhckNvZGVBdChpKS50b1N0cmluZygxNik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKG51bWJlciArIFwiIFwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShcIlxcblxcblwiKTtcbiAgICBcbiAgICByZXR1cm4gbnVtYmVyO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCaW5hcnlQYXJzZXI7Il19
