'use strict';

var GENERIC_LEVEL = process.env.NODE_EA_LOGGER || 1;

var Logger = function Logger(level) {
    /**
     * logLevel =>
     *     -1 || 'N' -> no log
     *      1 || 'E' -> error
     *      2 || 'W' -> warn (and bellow)
     *      3 || 'L' -> log (and bellow)
     *      4 || 'I' -> info (and bellow)
     *      5 || 'D' -> debug (and bellow)
     *     99 || 'A' -> all
     */
    var logLevel = level || GENERIC_LEVEL || 1; // Show error by default

    this.debug = function (msg) {
        if (logLevel >= 5) {
            console.log('#DEBUG# - ' + JSON.stringify(msg));
        }
    };
    this.log = function (msg) {
        if (logLevel >= 4) {
            console.log('#LOG# - ' + JSON.stringify(msg));
        }
    };
    this.info = function (msg) {
        if (logLevel >= 3) {
            console.log('#INFO# - ' + JSON.stringify(msg));
        }
    };
    this.warn = function (msg) {
        if (logLevel >= 2) {
            console.log('#WARNING# - ' + JSON.stringify(msg));
        }
    };
    this.error = function (msg) {
        if (logLevel >= 1) {
            console.log('#ERROR# - ' + JSON.stringify(msg));
        }
    };

    /**/
    this.getLogLevel = function () {
        return logLevel;
    };

    this.setLogLevel = function (level) {
        return logLevel = level || 1;
    };
};

var LOG = new Logger();

Logger.prototype.none = function () {
    LOG.setLogLevel(-1);
};
Logger.prototype.error = function () {
    LOG.setLogLevel(1);
};
Logger.prototype.warn = function () {
    LOG.setLogLevel(2);
};
Logger.prototype.info = function () {
    LOG.setLogLevel(3);
};
Logger.prototype.log = function () {
    LOG.setLogLevel(4);
};
Logger.prototype.debug = function () {
    LOG.setLogLevel(5);
};
Logger.prototype.all = function () {
    LOG.setLogLevel(99);
};

module.exports = LOG;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9Mb2dnZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNLGdCQUFnQixRQUFRLEdBQVIsQ0FBWSxjQUFaLElBQThCLENBQXBEOztBQUVBLElBQUksU0FBUyxTQUFULE1BQVMsQ0FBUyxLQUFULEVBQWdCOzs7Ozs7Ozs7OztBQVd6QixRQUFJLFdBQVcsU0FBUyxhQUFULElBQTBCLENBQXpDLEM7O0FBRUEsU0FBSyxLQUFMLEdBQWEsVUFBUyxHQUFULEVBQWM7QUFDdkIsWUFBSSxZQUFZLENBQWhCLEVBQW1CO0FBQ2Ysb0JBQVEsR0FBUixDQUFZLGVBQWUsS0FBSyxTQUFMLENBQWUsR0FBZixDQUEzQjtBQUNIO0FBQ0osS0FKRDtBQUtBLFNBQUssR0FBTCxHQUFXLFVBQVMsR0FBVCxFQUFjO0FBQ3JCLFlBQUksWUFBWSxDQUFoQixFQUFtQjtBQUNmLG9CQUFRLEdBQVIsQ0FBWSxhQUFhLEtBQUssU0FBTCxDQUFlLEdBQWYsQ0FBekI7QUFDSDtBQUNKLEtBSkQ7QUFLQSxTQUFLLElBQUwsR0FBWSxVQUFTLEdBQVQsRUFBYztBQUN0QixZQUFJLFlBQVksQ0FBaEIsRUFBbUI7QUFDZixvQkFBUSxHQUFSLENBQVksY0FBYyxLQUFLLFNBQUwsQ0FBZSxHQUFmLENBQTFCO0FBQ0g7QUFDSixLQUpEO0FBS0EsU0FBSyxJQUFMLEdBQVksVUFBUyxHQUFULEVBQWM7QUFDdEIsWUFBSSxZQUFZLENBQWhCLEVBQW1CO0FBQ2Ysb0JBQVEsR0FBUixDQUFZLGlCQUFpQixLQUFLLFNBQUwsQ0FBZSxHQUFmLENBQTdCO0FBQ0g7QUFDSixLQUpEO0FBS0EsU0FBSyxLQUFMLEdBQWEsVUFBUyxHQUFULEVBQWM7QUFDdkIsWUFBSSxZQUFZLENBQWhCLEVBQW1CO0FBQ2Ysb0JBQVEsR0FBUixDQUFZLGVBQWUsS0FBSyxTQUFMLENBQWUsR0FBZixDQUEzQjtBQUNIO0FBQ0osS0FKRDs7O0FBT0EsU0FBSyxXQUFMLEdBQW1CLFlBQVc7QUFDMUIsZUFBTyxRQUFQO0FBQ0gsS0FGRDs7QUFJQSxTQUFLLFdBQUwsR0FBbUIsVUFBUyxLQUFULEVBQWdCO0FBQy9CLGVBQU8sV0FBVyxTQUFTLENBQTNCO0FBQ0gsS0FGRDtBQUdILENBL0NEOztBQWlEQSxJQUFJLE1BQU0sSUFBSSxNQUFKLEVBQVY7O0FBRUEsT0FBTyxTQUFQLENBQWlCLElBQWpCLEdBQThCLFlBQVc7QUFBRSxRQUFJLFdBQUosQ0FBZ0IsQ0FBQyxDQUFqQjtBQUFvQixDQUEvRDtBQUNBLE9BQU8sU0FBUCxDQUFpQixLQUFqQixHQUE4QixZQUFXO0FBQUUsUUFBSSxXQUFKLENBQWdCLENBQWhCO0FBQW1CLENBQTlEO0FBQ0EsT0FBTyxTQUFQLENBQWlCLElBQWpCLEdBQThCLFlBQVc7QUFBRSxRQUFJLFdBQUosQ0FBZ0IsQ0FBaEI7QUFBbUIsQ0FBOUQ7QUFDQSxPQUFPLFNBQVAsQ0FBaUIsSUFBakIsR0FBOEIsWUFBVztBQUFFLFFBQUksV0FBSixDQUFnQixDQUFoQjtBQUFtQixDQUE5RDtBQUNBLE9BQU8sU0FBUCxDQUFpQixHQUFqQixHQUE4QixZQUFXO0FBQUUsUUFBSSxXQUFKLENBQWdCLENBQWhCO0FBQW1CLENBQTlEO0FBQ0EsT0FBTyxTQUFQLENBQWlCLEtBQWpCLEdBQThCLFlBQVc7QUFBRSxRQUFJLFdBQUosQ0FBZ0IsQ0FBaEI7QUFBbUIsQ0FBOUQ7QUFDQSxPQUFPLFNBQVAsQ0FBaUIsR0FBakIsR0FBOEIsWUFBVztBQUFFLFFBQUksV0FBSixDQUFnQixFQUFoQjtBQUFvQixDQUEvRDs7QUFFQSxPQUFPLE9BQVAsR0FBaUIsR0FBakIiLCJmaWxlIjoiTG9nZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgR0VORVJJQ19MRVZFTCA9IHByb2Nlc3MuZW52Lk5PREVfRUFfTE9HR0VSIHx8IDE7XG5cbnZhciBMb2dnZXIgPSBmdW5jdGlvbihsZXZlbCkge1xuICAgIC8qKlxuICAgICAqIGxvZ0xldmVsID0+XG4gICAgICogICAgIC0xIHx8ICdOJyAtPiBubyBsb2dcbiAgICAgKiAgICAgIDEgfHwgJ0UnIC0+IGVycm9yXG4gICAgICogICAgICAyIHx8ICdXJyAtPiB3YXJuIChhbmQgYmVsbG93KVxuICAgICAqICAgICAgMyB8fCAnTCcgLT4gbG9nIChhbmQgYmVsbG93KVxuICAgICAqICAgICAgNCB8fCAnSScgLT4gaW5mbyAoYW5kIGJlbGxvdylcbiAgICAgKiAgICAgIDUgfHwgJ0QnIC0+IGRlYnVnIChhbmQgYmVsbG93KVxuICAgICAqICAgICA5OSB8fCAnQScgLT4gYWxsXG4gICAgICovXG4gICAgdmFyIGxvZ0xldmVsID0gbGV2ZWwgfHwgR0VORVJJQ19MRVZFTCB8fCAxOyAgICAgIC8vIFNob3cgZXJyb3IgYnkgZGVmYXVsdFxuICAgIFxuICAgIHRoaXMuZGVidWcgPSBmdW5jdGlvbihtc2cpIHtcbiAgICAgICAgaWYgKGxvZ0xldmVsID49IDUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCcjREVCVUcjIC0gJyArIEpTT04uc3RyaW5naWZ5KG1zZykpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmxvZyA9IGZ1bmN0aW9uKG1zZykge1xuICAgICAgICBpZiAobG9nTGV2ZWwgPj0gNCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJyNMT0cjIC0gJyArIEpTT04uc3RyaW5naWZ5KG1zZykpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmluZm8gPSBmdW5jdGlvbihtc2cpIHtcbiAgICAgICAgaWYgKGxvZ0xldmVsID49IDMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCcjSU5GTyMgLSAnICsgSlNPTi5zdHJpbmdpZnkobXNnKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMud2FybiA9IGZ1bmN0aW9uKG1zZykge1xuICAgICAgICBpZiAobG9nTGV2ZWwgPj0gMikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJyNXQVJOSU5HIyAtICcgKyBKU09OLnN0cmluZ2lmeShtc2cpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5lcnJvciA9IGZ1bmN0aW9uKG1zZykge1xuICAgICAgICBpZiAobG9nTGV2ZWwgPj0gMSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJyNFUlJPUiMgLSAnICsgSlNPTi5zdHJpbmdpZnkobXNnKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIC8qKi9cbiAgICB0aGlzLmdldExvZ0xldmVsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBsb2dMZXZlbDtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuc2V0TG9nTGV2ZWwgPSBmdW5jdGlvbihsZXZlbCkge1xuICAgICAgICByZXR1cm4gbG9nTGV2ZWwgPSBsZXZlbCB8fCAxO1xuICAgIH07XG59O1xuXG52YXIgTE9HID0gbmV3IExvZ2dlcigpO1xuXG5Mb2dnZXIucHJvdG90eXBlLm5vbmUgICAgICAgPSBmdW5jdGlvbigpIHsgTE9HLnNldExvZ0xldmVsKC0xKX0gO1xuTG9nZ2VyLnByb3RvdHlwZS5lcnJvciAgICAgID0gZnVuY3Rpb24oKSB7IExPRy5zZXRMb2dMZXZlbCgxKX0gO1xuTG9nZ2VyLnByb3RvdHlwZS53YXJuICAgICAgID0gZnVuY3Rpb24oKSB7IExPRy5zZXRMb2dMZXZlbCgyKX0gO1xuTG9nZ2VyLnByb3RvdHlwZS5pbmZvICAgICAgID0gZnVuY3Rpb24oKSB7IExPRy5zZXRMb2dMZXZlbCgzKX0gO1xuTG9nZ2VyLnByb3RvdHlwZS5sb2cgICAgICAgID0gZnVuY3Rpb24oKSB7IExPRy5zZXRMb2dMZXZlbCg0KX0gO1xuTG9nZ2VyLnByb3RvdHlwZS5kZWJ1ZyAgICAgID0gZnVuY3Rpb24oKSB7IExPRy5zZXRMb2dMZXZlbCg1KX0gO1xuTG9nZ2VyLnByb3RvdHlwZS5hbGwgICAgICAgID0gZnVuY3Rpb24oKSB7IExPRy5zZXRMb2dMZXZlbCg5OSl9IDtcblxubW9kdWxlLmV4cG9ydHMgPSBMT0c7Il19
