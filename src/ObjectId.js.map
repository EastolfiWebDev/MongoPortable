{"version":3,"sources":["ObjectId.ts"],"names":[],"mappings":"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","file":"ObjectId.js","sourcesContent":["import * as _ from \"lodash\";\nimport { JSWLogger } from \"jsw-logger\";\n\nimport { BinaryParser } from \"./binary\";\n\n/**\n * Machine id.\n *\n * Create a random 3-byte value (i.e. unique for this\n * process). Other drivers use a md5 of the machine id here, but\n * that would mean an asyc call to gethostname, so we don\"t bother.\n * \n * @ignore\n */\nvar MACHINE_ID: number = parseInt(`${Math.random() * 0xFFFFFF}`, 10);\n\n// Regular expression that checks for hex value\nvar checkForHexRegExp = new RegExp(\"^[0-9a-fA-F]{24}$\");\nvar isValidHexRegExp = function(str, len = 24) {\n    if (str.length === len && checkForHexRegExp.test(str)) return true;\n    \n    return false;\n};\n\nvar pid: number;\ntry {\n    if (_.isNil(process)) pid = process.pid;\n} catch (e) {\n    pid = Math.floor(Math.random() * 100000);\n}\n\n/**\n * ObjectId\n * \n * @module ObjectId\n * @since 0.0.1\n * @author Eduardo Astolfi <eastolfi91@gmail.com>\n * @copyright 2016 Eduardo Astolfi <eastolfi91@gmail.com>\n * @license MIT Licensed\n * \n * @classdesc Represents the BSON ObjectId type\n * \n * @param {string|number} id - Can be a 24 byte hex string, a 12 byte binary string or a Number.\n */\nclass ObjectId {\n    protected logger: JSWLogger;\n    \n    private static cacheHexString: string;\n    static index: number = 0;\n    \n    private _bsontype: string = \"ObjectId\";\n    private __id: string;\n    \n    binaryParser: BinaryParser;\n    id: string;\n    \n    constructor(id?: string|number) {\n        // if (!(this instanceof ObjectId)) return new ObjectId(id, _hex);\n        \n        this.logger = JSWLogger.instance;\n        this.binaryParser = new BinaryParser();\n        \n        if (_.isNil(id)) {\n            this.id = this.generate();\n        } else {\n            if (_.isNumber(id)) {\n                this.id = this.generate(id);\n            } else {\n                // String or Hex\n                if (_.isString(id) && ((<string>id).length === 12 || (<string>id).length === 24)) {\n                    if (isValidHexRegExp(id)) {\n                        // Valid Hex\n                        let _id = ObjectId.createFromHexString(id);\n                        this.id = _id.id;\n                    }  else if ((<string>id).length === 12) {\n                        // Valid Byte String\n                        this.id = (<string>id);\n                    } else {\n                        this.logger.throw(\"Value passed in is not a valid 24 character hex string\");\n                    }\n                } else {\n                    this.logger.throw(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");\n                }\n            }\n        }\n        \n        if (ObjectId.cacheHexString) {\n            this.__id = this.toHexString();\n        }\n    }\n    \n    /**\n     * Return the ObjectId id as a 24 byte hex string representation\n     * \n     * @method ObjectId#toHexString\n     *\n     * @returns {String} The 24 byte hex string representation.\n     */\n    toHexString() {\n        if (ObjectId.cacheHexString && this.__id) return this.__id;\n    \n        var hexString = \"\",\n            number,\n            value;\n        \n        for (var index = 0, len = this.id.length; index < len; index++) {\n            value = this.binaryParser.toByte(parseInt(this.id[index])); // TODO\n            number = value <= 15 ? \"0\" + value.toString(16) : value.toString(16);\n            \n            hexString = hexString + number;\n        }\n        \n        if (ObjectId.cacheHexString) {\n            this.__id = hexString;\n        }\n        \n        return hexString;\n    }\n    \n    /**\n     * Alias for {@link ObjectId#toHexString}\n     * \n     * @method Cursor#next\n     */\n    toString() {\n        return this.toHexString();\n    }\n    \n    /**\n     * Alias for {@link ObjectId#toHexString}\n     * \n     * @method Cursor#next\n     */\n    toJSON() {\n        return this.toHexString();\n    }\n    \n    /**\n     * Update the ObjectId index used in generating new ObjectId\"s on the driver\n     * \n     * @method ObjectId#get_inc\n     * @private\n     *\n     * @returns {Number} Next index value.\n     */\n    getInc() {\n        return ObjectId.index = (ObjectId.index + 1) % 0xFFFFFF;\n    }\n    \n    /**\n     * Generate a 12 byte id string used in ObjectId\"s\n     *\n     * @method ObjectId#generate\n     * @private\n     * \n     * @param {Number} [time] - Second based timestamp to the generation.\n     * \n     * @return {String} The 12 byte id binary string.\n     */\n    generate(time?: string|number) {\n        if (_.isNil(time) || !_.isNumber(time)) {\n            time = Date.now() / 1000;\n        }\n        \n        /* for time-based ObjectId the bytes following the time will be zeroed */\n        var time4Bytes = this.binaryParser.encodeInt(<number>time, 32, true, true);\n        var machine3Bytes = this.binaryParser.encodeInt(MACHINE_ID, 24, false);\n        var pid2Bytes = this.binaryParser.fromShort(pid);\n        var index3Bytes = this.binaryParser.encodeInt(this.getInc(), 24, false, true);\n        \n        return time4Bytes + machine3Bytes + pid2Bytes + index3Bytes;\n    }\n    \n    /**\n     * Compares the equality of this ObjectId with [otherID].\n     *\n     * @method ObjectId#equals\n     * \n     * @param {Object} otherID - ObjectId instance to compare against.\n     * \n     * @returns {Boolean} The result of comparing two ObjectId\"s\n     */\n    equals(otherID) {\n        var id = (otherID instanceof ObjectId || otherID.toHexString) ? otherID.id : ObjectId.createFromHexString(otherID).id;\n    \n        return this.id === id;\n    }\n    \n    /**\n     * Returns the generation time in seconds that this ID was generated.\n     *\n     * @method ObjectId#getTimestamp\n     * \n     * @returns {Number} Number of seconds in the timestamp part of the 12 byte id.\n     */\n    getTimestamp() {\n        var timestamp = new Date();\n        \n        timestamp.setTime(Math.floor(this.binaryParser.decodeInt(this.id.substring(0, 4), 32, true, true)) * 1000);\n        \n        return timestamp;\n    }\n    \n    /* GETTER - SETTER */\n    get generationTime() {\n        return Math.floor(this.binaryParser.decodeInt(this.id.substring(0, 4), 32, true, true));\n    }\n    \n    set generationTime(value: string|number) {\n        value = this.binaryParser.encodeInt(<number>value, 32, true, true);\n        \n        this.id = value + this.id.substr(4);\n        // delete this.__id;\n        this.toHexString();\n    }\n    \n    /* STATIC METHODS */\n    \n    /**\n     * Creates an ObjectId from a hex string representation of an ObjectId.\n     *\n     * @method ObjectId#createFromHexString\n     * \n     * @param {String} hexString - An ObjectId 24 byte hexstring representation.\n     * \n     * @returns {ObjectId} The created ObjectId\n     */\n    static createFromHexString(hexString) {\n        // Throw an error if it\"s not a valid setup\n        if(_.isNil(hexString) || hexString.length != 24) {\n            throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");\n        }\n        \n        var len = hexString.length;\n        \n        var result = \"\", \n            string, \n            number;\n        \n        for (var index = 0; index < len; index += 2) {\n            string = hexString.substr(index, 2);\n            number = parseInt(string, 16);\n            \n            result += new BinaryParser().fromByte(number);\n        }\n        \n        return new ObjectId(result);\n    }\n    \n    /**\n     * Creates an ObjectId from a second based number, with the rest of the ObjectId zeroed out. \n     * Used for comparisons or sorting the ObjectId.\n     *\n     * @method ObjectId#createFromTime\n     * \n     * @param {Number} time - A number of seconds.\n     * \n     * @returns {ObjectId} The created ObjectId\n     */\n    static createFromTime(time) {\n        let binaryParser = new BinaryParser();\n        let id = binaryParser.encodeInt(time, 32, true, true) + binaryParser.encodeInt(0, 64, true, true);\n        \n        return new ObjectId(id);\n    }\n    \n    /**\n     * Creates an ObjectId from a second based number, with the rest of the ObjectId zeroed out. Used for comparisons or sorting the ObjectId.\n     *\n     * @method ObjectId#createPk\n     * \n     * @param {Number} time an integer number representing a number of seconds.\n     * @return {ObjectId} return the created ObjectId\n     */\n    static createPk() {\n        return new ObjectId();\n    }\n}\n\nexport { ObjectId };"]}