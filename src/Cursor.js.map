{"version":3,"sources":["Cursor.ts"],"names":[],"mappings":"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","file":"Cursor.js","sourcesContent":["import * as _ from \"lodash\";\nimport { JSWLogger } from \"jsw-logger\";\n\nimport { Selector } from \"./selector\";\n\nclass Options {\n    skip: number;\n    limit: number;\n    sort;\n    \n    private __defaultOptions = {\n        skip: 0,\n        limit: 15,\n        sort: null\n    };\n    \n    constructor(options?: any) {\n        if (_.isNil(options)) {\n            options = {}\n        }\n        \n        this.skip = (options.skip ? options.skip : this.__defaultOptions.skip);\n        this.limit = (options.limit ? options.limit : this.__defaultOptions.limit);\n        this.sort = (options.sort ? options.sort : this.__defaultOptions.sort);\n    }\n}\n\n/**\n * Cursor\n * \n * @module Cursor\n * @since 0.0.1\n * @author Eduardo Astolfi <eduardo.astolfi91@gmail.com>\n * @copyright 2016 Eduardo Astolfi <eduardo.astolfi91@gmail.com>\n * @license MIT Licensed\n * @classdesc Cursor class that maps a MongoDB-like cursor\n */\nclass Cursor {\n    protected logger: JSWLogger;\n    \n    documents;\n    selector;\n    fields;\n    skipValue;\n    limitValue;\n    sortValue;\n    sorted: boolean = false;\n    selector_compiled;\n    selector_id;\n    fetch_mode;\n    indexes = null;\n    sort_compiled;\n    db_objects;\n    cursor_pos;\n    \n    static COLSCAN = \"colscan\";\n    static IDXSCAN = \"idxscan\";\n    \n    /**\n     * @param {MongoPortable} db - Additional options\n     * @param {Array} documents - The list of documents\n     * @param {Object|Array|String} [selection={}] - The selection for matching documents\n     * @param {Object|Array|String} [fields={}] - The fields of the document to show\n     * @param {Object} [options] - Database object\n     * \n     * @param {Object} [options.pkFactory=null] - Object overriding the basic \"ObjectId\" primary key generation.\n     */\n    constructor(documents, selection, fields?, options: Object = {}) {\n        this.documents = documents;\n        this.selector = selection;\n        \n        let opts = new Options(options);\n        \n        this.skipValue = opts.skip;\n        this.limitValue = opts.limit;\n        this.sortValue = opts.sort;\n        \n        this.logger = JSWLogger.instance;\n    \n        /** ADD IDX **/\n        if (Selector.isSelectorCompiled(this.selector)) {\n            this.selector_compiled = this.selector;\n        } else {\n            this.selector_compiled = new Selector(this.selector, Selector.MATCH_SELECTOR);\n        }\n        \n        for (let i = 0; i < this.selector_compiled.clauses.length; i++) {\n            if (this.selector_compiled.clauses[i].key === \"_id\") {\n                this.selector_id = this.selector_compiled.clauses[i].value;\n            }\n        }\n        \n        for (let i = 0; i < this.selector_compiled.clauses.length; i++) {\n            if (this.selector_compiled.clauses[i].key === \"_id\") {\n                var _val = this.selector_compiled.clauses[i].value;\n                \n                if (_.isString(_val) || _.isNumber(_val)) {\n                    this.selector_id = _val;\n                }\n            }\n        }\n\n        /** ADD IDX **/\n        \n        this.fetch_mode = Cursor.COLSCAN || Cursor.IDXSCAN;\n        // this.indexes = null;//findUsableIndexes();\n        \n        // if (cursor.fetch_mode === Cursor.COLSCAN) {\n        //     // COLSCAN, wi will iterate over all documents\n        //     docs = _.cloneDeep(cursor.collection.docs);\n        // } else if (cursor.fetch_mode === Cursor.IDXSCAN) {\n        //     // IDXSCAN, wi will iterate over all needed documents\n        //     for (let i = 0; i < cursor.indexes.length; i++) {\n        //         let index = cursor.indexes[i];\n                \n        //         for (let i = index.start; i < index.end; i++) {\n        //             let idx_id = cursor.collection.getIndex(index.name)[i];\n                    \n        //             docs.push(cursor.collection.docs[idx_id]);\n        //         }\n        //     }\n        // }\n        \n        this.fields = new Selector(fields, Selector.FIELD_SELECTOR);\n        \n        this.sort_compiled = new Selector(this.sortValue, Selector.SORT_SELECTOR);\n    \n        this.db_objects = null;\n        this.cursor_pos = 0;\n    }\n    \n    /**\n     * Moves a cursor to the begining\n     * \n     * @method Cursor#rewind\n     */\n    rewind() {\n        this.db_objects = null;\n        this.cursor_pos = 0;\n    }\n    \n    /**\n     * Iterates over the cursor, calling a callback function\n     * \n     * @method Cursor#forEach\n     * \n     * @param {Function} [callback=null] - Callback function to be called for each document\n     */\n    forEach(callback) {\n        let docs = this.fetchAll();\n        \n        for (let i = 0; i < docs.length; i++) {\n            callback(docs[i]);\n        }\n    }\n    \n    /**\n     * Iterates over the cursor, returning a new array with the documents affected by the callback function\n     * \n     * @method Cursor#map\n     * \n     * @param {Function} [callback=null] - Callback function to be called for each document\n     * \n     * @returns {Array} The documents after being affected with the callback function\n     */\n    map(callback) {\n        var res = [];\n    \n        this.forEach(function (doc) {\n            res.push(callback(doc));\n        });\n    \n        return res;\n    }\n    \n    /**\n     * Checks if the cursor has one document to be fetched\n     * \n     * @method Cursor#hasNext\n     * \n     * @returns {Boolean} True if we can fetch one more document\n     */\n    hasNext() {\n        return (this.cursor_pos < this.documents.length);\n    }\n    \n    /**\n     * Alias for {@link Cursor#fetchOne}\n     * \n     * @method Cursor#next\n     */\n    next() {\n        return this.fetchOne();\n    }\n    \n    /**\n     * Alias for {@link Cursor#fetchAll}\n     * \n     * @method Cursor#fetch\n     */\n    fetch() {\n        return this.fetchAll();\n    }\n    \n    /**\n     * Fetch all documents in the cursor\n     * \n     * @method Cursor#fetchAll\n     * \n     * @returns {Array} All the documents contained in the cursor\n     */\n    fetchAll() {\n        return _getDocuments(this, false) || [];\n    }\n    \n    /**\n     * Retrieves the next document in the cursor\n     * \n     * @method Cursor#fetchOne\n     * \n     * @returns {Object} The next document in the cursor\n     */\n    fetchOne() {\n        return _getDocuments(this, true);\n    }\n    \n    /**\n     * Obtains the total of documents of the cursor\n     * \n     * @method Cursor#count\n     * \n     * @returns {Number} The total of documents in the cursor\n     */\n    count() {\n        return this.fetchAll().length;\n    }\n    \n    /**\n     * Set the sorting of the cursor\n     * \n     * @method Cursor#sort\n     * \n     * @param {Object|Array|String} spec - The sorting specification\n     * \n     * @returns {Cursor} This instance so it can be chained with other methods\n     */\n    setSorting(spec) {\n        if (_.isNil(spec)) this.logger.throw(\"You need to specify a sorting\");\n        \n        if (spec) {\n            this.sortValue = spec;\n            this.sort_compiled = (new Selector(spec, Selector.SORT_SELECTOR));\n        }\n        \n        return this;\n    }\n    \n    /**\n     * Applies a sorting on the cursor\n     * \n     * @method Cursor#sort\n     * \n     * @param {Object|Array|String} spec - The sorting specification\n     * \n     * @returns {Cursor} This instance so it can be chained with other methods\n     */\n    sort(spec) {\n        var _sort = this.sort_compiled || null;\n        \n        if (spec) {\n            _sort = new Selector(spec, Selector.SORT_SELECTOR);\n        }\n        \n        if (_sort) {\n            if (!_.isNil(this.db_objects) && _.isArray(this.db_objects)) {\n                this.db_objects = this.db_objects.sort(_sort);\n                this.sorted = true;\n            } else {\n                this.setSorting(spec);\n            }\n        }\n        \n        return this;\n    }\n    \n    /**\n     * Set the number of document to skip when fetching the cursor\n     * \n     * @method Cursor#skip\n     * \n     * @param {Number} skip - The number of documents to skip\n     * \n     * @returns {Cursor} This instance so it can be chained with other methods\n     */\n    skip(skip) {\n        if (_.isNil(skip) || _.isNaN(skip)) throw new Error(\"Must pass a number\");\n        \n        this.skipValue = skip;\n        \n        return this;\n    }\n    \n    /**\n     * Set the max number of document to fetch\n     * \n     * @method Cursor#limit\n     * \n     * @param {Number} limit - The max number of documents\n     * \n     * @returns {Cursor} This instance so it can be chained with other methods\n     */\n    limit(limit) {\n        if (_.isNil(limit) || _.isNaN(limit)) throw new Error(\"Must pass a number\");\n        \n        this.limitValue = limit;\n        \n        return this;\n    }\n    \n    /**\n     * @todo Implement\n     */\n    batchSize() {\n        // Controls the number of documents MongoDB will return to the client in a single network message.\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    /**\n     * @todo Implement\n     */\n    close() {\n        // Close a cursor and free associated server resources.\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    /**\n     * @todo Implement\n     */\n    comment() {\n        // Attaches a comment to the query to allow for traceability in the logs and the system.profile collection.\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    /**\n     * @todo Implement\n     */\n    explain() {\n        // Reports on the query execution plan for a cursor.\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    /**\n     * @todo Implement\n     */\n    hint() {\n        // Forces MongoDB to use a specific index for a query.\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    /**\n     * @todo Implement\n     */\n    itcount() {\n        // Computes the total number of documents in the cursor client-side by fetching and iterating the result set.\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    /**\n     * @todo Implement\n     */\n    maxScan() {\n        // Specifies the maximum number of items to scan; documents for collection scans, keys for index scans.\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    /**\n     * @todo Implement\n     */\n    maxTimeMS() {\n        // Specifies a cumulative time limit in milliseconds for processing operations on a cursor.\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    /**\n     * @todo Implement\n     */\n    max() {\n        // Specifies an exclusive upper index bound for a cursor. For use with cursor.hint()\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    /**\n     * @todo Implement\n     */\n    min() {\n        // Specifies an inclusive lower index bound for a cursor. For use with cursor.hint()\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    /**\n     * @todo Implement\n     */\n    noCursorTimeout() {\n        // Instructs the server to avoid closing a cursor automatically after a period of inactivity.\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    /**\n     * @todo Implement\n     */\n    objsLeftInBatch() {\n        // Returns the number of documents left in the current cursor batch.\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    /**\n     * @todo Implement\n     */\n    pretty() {\n        // Configures the cursor to display results in an easy-to-read format.\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    /**\n     * @todo Implement\n     */\n    readConcern() {\n        // Specifies a read concern for a find() operation.\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    /**\n     * @todo Implement\n     */\n    readPref() {\n        // Specifies a read preference to a cursor to control how the client directs queries to a replica set.\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    /**\n     * @todo Implement\n     */\n    returnKey() {\n        // Modifies the cursor to return index keys rather than the documents.\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    /**\n     * @todo Implement\n     */\n    showRecordId() {\n        // Adds an internal storage engine ID field to each document returned by the cursor.\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    /**\n     * @todo Implement\n     */\n    size() {\n        // Returns a count of the documents in the cursor after applying skip() and limit() methods.\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    /**\n     * @todo Implement\n     */\n    snapshot() {\n        // Forces the cursor to use the index on the _id field. Ensures that the cursor returns each document, \n        // with regards to the value of the _id field, only once.\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    /**\n     * @todo Implement\n     */\n    tailable() {\n        // Marks the cursor as tailable. Only valid for cursors over capped collections.\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    /**\n     * @todo Implement\n     */\n    toArray() {\n        // Returns an array that contains all documents returned by the cursor.\n        throw new Error(\"Not yet implemented\");\n    }\n    \n    static sort(doc, fields) {\n        \n    }\n    \n    /**\n     * Projects the fields of one or several documents, changing the output\n     * \n     * @method Cursor.project\n     * \n     * @param {Array|Object} doc - The document/s that will be projected\n     * @param {String|Array|Object} spec - Fields projection specification. Can be an space/comma separated list, an array, or an object\n     * \n     * @returns {Array|Object} The document/s after the projection\n     */\n    static project(doc, spec, aggregation = false) {\n        // if (_.isNil(doc)) this.logger.throw(\"doc param required\");\n        // if (_.isNil(spec)) this.logger.throw(\"spec param required\");\n    \n        var fields = null;\n        if (aggregation) {\n            fields = new Selector(spec, Selector.AGG_FIELD_SELECTOR);\n        } else {\n            fields = new Selector(spec, Selector.FIELD_SELECTOR);\n        }\n        \n        if (_.isArray(doc)) {\n            for (var i = 0; i < doc.length; i++) {\n                doc[i] = _mapFields(doc[i], fields);\n            }\n            \n            return doc;\n        } else {\n            return _mapFields(doc, fields);\n        }\n    }\n}\n\nvar _mapFields = function (doc, fields) {\n    var _doc = _.cloneDeep(doc);\n\n    if (!_.isNil(fields) && _.isPlainObject(fields) && !_.isEqual(fields, {})) {\n        var showId = true,\n            showing = null;\n\n        // Whether if we showing the _id field\n        if (_.hasIn(fields, \"_id\") && fields._id === -1) {\n            showId = false;\n        }\n\n        for (var field in fields) {\n            // Whether if we are showing or hidding fields\n            if (field !== \"_id\") {\n                if (fields[field] === 1) {\n                    showing = true;\n                    break;\n                } else if (fields[field] === -1) {\n                    showing = false;\n                    break;\n                }\n            }\n        }\n\n        var tmp = null;\n\n        for (var field in fields) {\n            if (tmp === null) {\n                if (showing) {\n                    tmp = {};\n                } else {\n                    tmp = _.cloneDeep(doc);\n                }\n            }\n    \n            // Add or remove the field\n            if (fields[field] === 1 || fields[field] === -1) {\n                // Show the field\n                if (showing) {\n                    tmp[field] = doc[field];\n                } else {\n                    // Hide the field\n                    delete tmp[field];\n                }\n            } else {\n                // Show the new field (rename)\n                tmp[field] = doc[fields[field]];\n            }\n        }\n\n        // Add or remove the _id field\n        if (showId) {\n            tmp._id = doc._id;\n        } else {\n            delete tmp._id;\n        }\n\n        _doc = tmp;\n    }\n    \n    return _doc;\n};\n\n/**\n * Retrieves one or all the documents in the cursor\n * \n * @method _getDocuments\n * @private\n * \n * @param {Cursor} cursor - The cursor with the documents\n * @param {Boolean} [justOne=false] - Whether it retrieves one or all the documents\n * \n * @returns {Array|Object} If [justOne=true] returns the next document, otherwise returns all the documents\n */\nvar _getDocuments = function(cursor, justOne = false) {\n    var docs = [];\n    \n    if (cursor.fetch_mode === Cursor.COLSCAN) {\n        // COLSCAN, wi will iterate over all documents\n        docs = _.cloneDeep(cursor.documents);\n    } else if (cursor.fetch_mode === Cursor.IDXSCAN) {\n        // IDXSCAN, wi will iterate over all needed documents\n        for (let i = 0; i < cursor.indexes.length; i++) {\n            let index = cursor.indexes[i];\n            \n            for (let i = index.start; i < index.end; i++) {\n                // let idx_id = cursor.collection.getIndex(index.name)[i];\n                let idx_id = index.index[i];\n                \n                docs.push(cursor.documents[idx_id]);\n            }\n        }\n    }\n    \n    // if (cursor.selector_id) {\n    //     if (_.hasIn(cursor.collection.doc_indexes, _.toString(cursor.selector_id))) {\n    //         let idx = cursor.collection.doc_indexes[_.toString(cursor.selector_id)];\n            \n    //         return Cursor.project(cursor.collection.docs[idx], cursor.fields);\n    //     } else {\n    //         if (justOne) {\n    //             return null;\n    //         } else {\n    //             return [];\n    //         }\n    //     }\n    // }\n    \n    // TODO add warning when sort/skip/limit and fetching one\n    // TODO add warning when skip/limit without order\n    // TODO index\n    while (cursor.cursor_pos < docs.length) {\n        var _doc = docs[cursor.cursor_pos];\n        cursor.cursor_pos++;\n        \n        if (cursor.selector_compiled.test(_doc)) {\n            if (_.isNil(cursor.db_objects)) cursor.db_objects = [];\n            \n            _doc = Cursor.project(_doc, cursor.fields);\n            \n            cursor.db_objects.push(_doc);\n            \n            if (justOne) {\n                // Add force sort\n                return _doc;\n            }\n        }\n    }\n    \n    if (_.isNil(cursor.db_objects)) return null;\n    \n    if (!cursor.sorted && hasSorting(cursor)) cursor.sort();\n    \n    var idxFrom = cursor.skipValue;\n    var idxTo = cursor.limitValue !== -1 ? (cursor.limitValue + idxFrom) : cursor.db_objects.length;\n    \n    return cursor.db_objects.slice(idxFrom, idxTo);\n    \n};\n\n\n\n/**\n * Checks if a cursor has a sorting defined\n * \n * @method hasSorting\n * @private\n * \n * @param {Cursor} cursor - The cursor\n * \n * @returns {Boolean} Whether the cursor has sorting or not\n */\nvar hasSorting = function(cursor) {\n    if (_.isNil(cursor.sortValue)) return false;\n    \n    return true;\n};\n\n\n\nexport { Cursor };"]}