{"version":3,"sources":["binary/BinaryParser.ts"],"names":[],"mappings":"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","file":"BinaryParser.js","sourcesContent":["import * as _                   from \"lodash\";\nimport { JSWLogger }            from \"jsw-logger\";\n\nimport { BinaryParserBuffer }   from \"./BinaryParserBuffer\";\n\n// Shorcut for String.fromCharCode\nvar chr = String.fromCharCode;\n\nvar maxBits = [];\nfor (var i = 0; i < 64; i++) {\n    maxBits[i] = Math.pow(2, i);\n}\n\nclass BinaryParser {\n    protected logger: JSWLogger;\n    \n    private bigEndian: string;\n    private allowExceptions: boolean;\n    \n    constructor(bigEndian?: string, allowExceptions: boolean = true) {\n        this.logger = JSWLogger.instance;\n    \n        this.bigEndian = bigEndian || \"\";\n        this.allowExceptions = allowExceptions;\n    }\n    \n    /**\n     * Generate a 12 byte id string used in ObjectId\"s\n     *\n     * @method BinaryParser#generate12string\n     * \n     * @return {String} The 12 byte id binary string.\n     */\n    generate12string() {\n        let time9bytes = Date.now().toString(32);\n        let rnd3bytes = this.encodeInt(parseInt((Math.random() * 0xFFFFFF).toString(), 10), 24, false);\n        \n        return time9bytes + rnd3bytes;\n    }\n    \n    decodeFloat(data: string|number, precisionBits: number, exponentBits: number) {\n        var b = new BinaryParserBuffer(this.bigEndian, data);\n        \n        b.checkBuffer(precisionBits + exponentBits + 1);\n        \n        var bias = maxBits[exponentBits - 1] - 1\n            , signal = b.readBits(precisionBits + exponentBits, 1)\n            , exponent = b.readBits(precisionBits, exponentBits)\n            , significand = 0\n            , divisor = 2\n            , curByte = b.buffer.length + (-precisionBits >> 3) - 1;\n        \n        do {\n            for (var byteValue = b.buffer[ ++curByte ], startBit = precisionBits % 8 || 8, mask = 1 << startBit; mask >>= 1; ( byteValue & mask ) && ( significand += 1 / divisor ), divisor *= 2 );\n        } while (precisionBits -= startBit);\n        \n        return exponent == ( bias << 1 ) + 1 ? significand ? NaN : signal ? -Infinity : +Infinity : ( 1 + signal * -2 ) * ( exponent || significand ? !exponent ? Math.pow( 2, -bias + 1 ) * significand : Math.pow( 2, exponent - bias ) * ( 1 + significand ) : 0 );\n    }\n    \n    decodeFloat_(data: string|number, precisionBits: number, exponentBits: number) {\n        var b = new BinaryParserBuffer(this.bigEndian, data);\n    \n        b.checkBuffer(precisionBits + exponentBits + 1);\n    \n        var bias = maxBits[exponentBits - 1] - 1,\n            signal = b.readBits(precisionBits + exponentBits, 1),\n            exponent = b.readBits(precisionBits, exponentBits),\n            significand = 0,\n            divisor = 2,\n            curByte = b.buffer.length + (-precisionBits >> 3) - 1;\n    \n        curByte++;\n        let byteValue, startBit, mask;\n        do {\n            // for (\n            //     var byteValue = b.buffer[ ++curByte ], startBit = precisionBits % 8 || 8, mask = 1 << startBit;\n            //     mask >>= 1; \n            //     ( byteValue & mask ) && ( significand += 1 / divisor ), divisor *= 2 \n            // );\n            byteValue = b.buffer[curByte];\n            startBit = precisionBits % 8 || 8;\n            mask = 1 << startBit;\n            \n            mask >>= 1;\n            while (mask) {\n                (byteValue & mask) && (significand += 1 / divisor);\n                divisor *= 2;\n                \n                mask >>= 1\n            }\n            precisionBits -= startBit\n        } while (precisionBits);\n        \n        \n    \n        if ( exponent == ( bias << 1 ) + 1 ) {\n        \tif (significand) {\n        \t\treturn NaN;\n        \t} else {\n        \t\tif (signal) {\n        \t\t\treturn -Infinity;\n        \t\t} else {\n        \t\t\treturn +Infinity;\n        \t\t}\n        \t}\n        } else {\n        \tvar _mod = 0;\n        \t\n        \tif (exponent || significand) {\n        \t    _mod = exponent ? Math.pow( 2, exponent - bias ) * ( 1 + significand ) : Math.pow( 2, -bias + 1 ) * significand;\n        \t}\n        \t\n        \treturn ( 1 + signal * -2 ) * (_mod);\n        }\n    \n    \n        // return exponent == ( bias << 1 ) + 1 ? significand ? NaN : signal ? -Infinity : +Infinity : ( 1 + signal * -2 ) * ( exponent || significand ? !exponent ? Math.pow( 2, -bias + 1 ) * significand : Math.pow( 2, exponent - bias ) * ( 1 + significand ) : 0 );\n    }\n    \n    decodeInt(data: string|number, bits: number, signed: boolean, forceBigEndian?: boolean) {\n        var b = new BinaryParserBuffer(this.bigEndian || forceBigEndian, data)\n            , x = b.readBits(0, bits)\n            , max = maxBits[bits]; //max = Math.pow( 2, bits );\n        \n        return signed && x >= max / 2\n            ? x - max\n            : x;\n    }\n    \n    decodeInt_(data: string|number, bits: number, signed: boolean, forceBigEndian?: boolean) {\n        var b = new BinaryParserBuffer(this.bigEndian || forceBigEndian, data),\n            x = b.readBits(0, bits),\n            max = maxBits[bits]; //max = Math.pow( 2, bits );\n    \n        return signed && x >= max / 2 ? x - max : x;\n    }\n    \n    encodeFloat(data: string|number, precisionBits: number, exponentBits: number) {\n        var bias = maxBits[exponentBits - 1] - 1\n            , minExp = -bias + 1\n            , maxExp = bias\n            , minUnnormExp = minExp - precisionBits\n            , n = parseFloat(_.toString(data))\n            , status = isNaN(n) || n == -Infinity || n == +Infinity ? n : 0\n            , exp = 0\n            , len = 2 * bias + 1 + precisionBits + 3\n            , bin = new Array(len)\n            , signal = (n = status !== 0 ? 0 : n) < 0\n            , intPart = Math.floor(n = Math.abs(n))\n            , floatPart = n - intPart\n            , lastBit\n            , rounded\n            , result\n            , i\n            , j;\n        \n        for (i = len; i; bin[--i] = 0);\n        \n        for (i = bias + 2; intPart && i; bin[--i] = intPart % 2, intPart = Math.floor(intPart / 2));\n        \n        // for (i = bias + 1; floatPart > 0 && i; (bin[++i] = ((floatPart *= 2) >= 1) - 0 ) && --floatPart);\n        for (i = bias + 1; floatPart > 0 && i; (bin[++i] = _.toNumber(((floatPart *= 2) >= 1)) ) && --floatPart);\n        \n        for (i = -1; ++i < len && !bin[i];);\n        \n        if (bin[(lastBit = precisionBits - 1 + (i = (exp = bias + 1 - i) >= minExp && exp <= maxExp ? i + 1 : bias + 1 - (exp = minExp - 1))) + 1]) {\n            if (!(rounded = bin[lastBit])) {\n                for (j = lastBit + 2; !rounded && j < len; rounded = bin[j++]);\n            }\n            \n            // for (j = lastBit + 1; rounded && --j >= 0; (bin[j] = !bin[j] - 0) && (rounded = 0));\n            for (j = lastBit + 1; rounded && --j >= 0; (bin[j] = _.toNumber(!bin[j])) && (rounded = 0));\n            // j = lastBit + 1;\n            // while (rounded && --j >= 0) {\n            //     bin[j] = _.toNumber(!bin[j]);\n            //     rounded = 0;\n            // }\n        }\n        \n        for (i = i - 2 < 0 ? -1 : i - 3; ++i < len && !bin[i];);\n        \n        if ((exp = bias + 1 - i) >= minExp && exp <= maxExp) {\n            ++i;\n        } else if (exp < minExp) {\n            exp != bias + 1 - len && exp < minUnnormExp && this.logger.warn(\"encodeFloat::float underflow\");\n            i = bias + 1 - (exp = minExp - 1);\n        }\n        \n        if (intPart || status !== 0) {\n            this.logger.warn(intPart ? \"encodeFloat::float overflow\" : \"encodeFloat::\" + status);\n            exp = maxExp + 1;\n            i = bias + 2;\n            \n            if (status == -Infinity) {\n                signal = true;\n            } else if (isNaN(status)) {\n                bin[i] = 1;\n            }\n        }\n        \n        for (n = Math.abs(exp + bias), j = exponentBits + 1, result = \"\"; --j; result = (n % 2) + result, n = n >>= 1);\n        \n        var r = [];\n        for (n = 0, j = 0, i = (result = (signal ? \"1\" : \"0\") + result + bin.slice(i, i + precisionBits).join(\"\")).length, r = []; i; j = (j + 1) % 8) {\n            n += (1 << j) * result.charAt(--i);\n            if (j == 7) {\n                r[r.length] = String.fromCharCode(n);\n                n = 0;\n            }\n        }\n        \n        r[r.length] = n\n            ? String.fromCharCode(n)\n            : \"\";\n        \n        return (this.bigEndian ? r.reverse() : r).join(\"\");\n    }\n    \n    encodeFloat_(data: string|number, precisionBits: number, exponentBits: number) {\n        var bias = maxBits[exponentBits - 1] - 1,\n            minExp = -bias + 1,\n            maxExp = bias,\n            minUnnormExp = minExp - precisionBits,\n            n = parseFloat(`${data}`),\n            status = isNaN(n) || n == -Infinity || n == +Infinity ? n : 0,\n            exp = 0,\n            len = 2 * bias + 1 + precisionBits + 3,\n            bin: Array<number> = new Array(len),\n            signal: boolean = (n = status !== 0 ? 0 : n) < 0,\n            intPart = Math.floor(n = Math.abs(n)),\n            floatPart: number = n - intPart,\n            lastBit,\n            rounded,\n            result,\n            i,\n            j;\n    \n    \n        // for (i = len; i; bin[--i] = 0);\n        i = len;\n        while (i) {\n            bin[--i] = 0;\n        }\n        \n        // for (i = bias + 2; intPart && i; bin[--i] = intPart % 2, intPart = Math.floor(intPart / 2));\n        i = bias + 2;\n        while (intPart && i) {\n            bin[--i] = intPart % 2;\n            intPart = Math.floor(intPart / 2);\n        }\n        \n        // for (i = bias + 1; floatPart > 0 && i; (bin[++i] = ((floatPart *= 2) >= 1) - 0 ) && --floatPart);\n        i = bias + 1;\n        while (floatPart > 0 && i) {\n            floatPart *= 2;\n            bin[++i] = floatPart >= 1 ? 1 : 0;\n            \n            --floatPart;\n        }\n        \n        // for (i = -1; ++i < len && !bin[i];);\n        i = 0;\n        while (i < len && !bin[i]) {\n            i++;\n        }\n      \n        if (bin[(lastBit = precisionBits - 1 + (i = (exp = bias + 1 - i) >= minExp && \n                exp <= maxExp ? i + 1 : bias + 1 - (exp = minExp - 1))) + 1]) {\n            if (!(rounded = bin[lastBit])) {\n                // for (j = lastBit + 2; !rounded && j < len; rounded = bin[j++]);\n                j = lastBit + 2;\n                while (!rounded && j < len) {\n                    rounded = bin[j++];\n                }\n            }\n            \n            // for (j = lastBit + 1; rounded && --j >= 0; (bin[j] = !bin[j] - 0) && (rounded = 0));\n            j = lastBit;\n            while (rounded && j >= 0) {\n                j--;\n                bin[j] = bin[j] ? 0 : 1;\n                rounded = 0;\n            }\n        }\n      \n        for (i = i - 2 < 0 ? -1 : i - 3; ++i < len && !bin[i];);\n        \n        if ((exp = bias + 1 - i) >= minExp && exp <= maxExp) {\n            ++i;\n        } else if (exp < minExp) {\n            exp != bias + 1 - len && exp < minUnnormExp && this.logger.warn(\"encodeFloat::float underflow\");\n            i = bias + 1 - (exp = minExp - 1);\n        }\n        \n        if (intPart || status !== 0) {\n            this.logger.warn(intPart ? \"encodeFloat::float overflow\" : \"encodeFloat::\" + status);\n            \n            exp = maxExp + 1;\n            i = bias + 2;\n        \n            if (status == -Infinity) {\n                signal = true; // 1\n            } else if (isNaN(status)) {\n                bin[i] = 1;\n            }\n        }\n      \n        // for (n = Math.abs(exp + bias), j = exponentBits + 1, result = \"\"; --j; result = (n % 2) + result, n = n >>= 1);\n        n = Math.abs(exp + bias);\n        j = exponentBits;\n        result = \"\";\n        while (j) {\n            j--;\n            result = (n % 2) + result;\n            n = n >>= 1;\n        }\n        \n        let r = [];\n        \n        // for (n = 0, j = 0, i = (result = (signal ? \"1\" : \"0\") + result + bin.slice(i, i + precisionBits).join(\"\")).length, r = []; i; j = (j + 1) % 8) {\n        n = 0;\n        j = 0;\n        result = (signal ? \"1\" : \"0\") + result + bin.slice(i, i + precisionBits).join(\"\");\n        i = result.length;\n        r = [];\n        while (i) {\n            j = (j + 1) % 8\n            n += (1 << j) * result.charAt(--i);\n            \n            if (j == 7) {\n                r[r.length] = String.fromCharCode(n);\n                n = 0;\n            }\n        }\n      \n        r[r.length] = n ? String.fromCharCode(n) : \"\";\n      \n        return (this.bigEndian ? r.reverse() : r).join(\"\");\n    }\n    \n    encodeInt(data: number, bits: number, signed: boolean, forceBigEndian?: boolean) {\n        var max = maxBits[bits];\n        \n        if (data >= max || data < -(max / 2)) {\n            this.logger.warn(\"encodeInt::overflow\");\n            data = 0;\n        }\n        \n        if (data < 0) {\n            data += max;\n        }\n        \n        for (var r = []; data; r[r.length] = String.fromCharCode(data % 256), data = Math.floor(data / 256));\n        \n        for (bits = -(-bits >> 3) - r.length; bits--; r[r.length] = \"\\0\");\n        \n        return ((this.bigEndian || forceBigEndian) ? r.reverse() : r).join(\"\");\n    }\n    \n    encodeInt_(data: number, bits: number, signed: boolean, forceBigEndian?: boolean) {\n        var max = maxBits[bits];\n        data = data - 0;    // Ensure a number\n        \n        if (data >= max || data < -(max / 2)) {\n            this.logger.warn(\"encodeInt::overflow\");\n            data = 0;\n        }\n        \n        if (data < 0) {\n            data += max;\n        }\n        \n        // for (var r = []; data; r[r.length] = String.fromCharCode(data % 256), data = Math.floor(data / 256));\n        let r = [];\n        while(data) {\n            r[r.length] = String.fromCharCode(data % 256);\n            data = Math.floor(data / 256);\n        }\n        \n        // for (bits = -(-bits >> 3) - r.length; bits--; r[r.length] = \"\\0\");\n        bits = -(-bits >> 3) - r.length;\n        while(bits) {\n            bits--;\n            r[r.length] = \"\\0\";\n        }\n        \n        return ((this.bigEndian || forceBigEndian) ? r.reverse() : r).join(\"\");\n    }\n    \n    toSmall    ( data: number ){ return this.decodeInt( data,  8, true  ); }\n    fromSmall  ( data: number ){ return this.encodeInt( data,  8, true  ); }\n    toByte     ( data: number ){ return this.decodeInt( data,  8, false ); }\n    fromByte   ( data: number ){ return this.encodeInt( data,  8, false ); }\n    toShort    ( data: number ){ return this.decodeInt( data, 16, true  ); }\n    fromShort  ( data: number ){ return this.encodeInt( data, 16, true  ); }\n    toWord     ( data: number ){ return this.decodeInt( data, 16, false ); }\n    fromWord   ( data: number ){ return this.encodeInt( data, 16, false ); }\n    toInt      ( data: number ){ return this.decodeInt( data, 32, true  ); }\n    fromInt    ( data: number ){ return this.encodeInt( data, 32, true  ); }\n    toLong     ( data: number ){ return this.decodeInt( data, 64, true  ); }\n    fromLong   ( data: number ){ return this.encodeInt( data, 64, true  ); }\n    toDWord    ( data: number ){ return this.decodeInt( data, 32, false ); }\n    fromDWord  ( data: number ){ return this.encodeInt( data, 32, false ); }\n    toQWord    ( data: number ){ return this.decodeInt( data, 64, true ); }\n    fromQWord  ( data: number ){ return this.encodeInt( data, 64, true ); }\n    toFloat    ( data: number ){ return this.decodeFloat( data, 23, 8   ); }\n    fromFloat  ( data: number ){ return this.encodeFloat( data, 23, 8   ); }\n    toDouble   ( data: number ){ return this.decodeFloat( data, 52, 11  ); }\n    fromDouble ( data: number ){ return this.encodeFloat( data, 52, 11  ); }\n    \n    // Static access to methods\n    static toSmall      ( data: number ) { return (new BinaryParser()).toSmall(data); }\n    static fromSmall    ( data: number ) { return (new BinaryParser()).fromSmall(data); }\n    static toByte       ( data: number ) { return (new BinaryParser()).toByte(data); }\n    static fromByte     ( data: number ) { return (new BinaryParser()).fromByte(data); }\n    static toShort      ( data: number ) { return (new BinaryParser()).toShort(data); }\n    static fromShort    ( data: number ) { return (new BinaryParser()).fromShort(data); }\n    static toWord       ( data: number ) { return (new BinaryParser()).toWord(data); }\n    static fromWord     ( data: number ) { return (new BinaryParser()).fromWord(data); }\n    static toInt        ( data: number ) { return (new BinaryParser()).toInt(data); }\n    static fromInt      ( data: number ) { return (new BinaryParser()).fromInt(data); }\n    static toLong       ( data: number ) { return (new BinaryParser()).toLong(data); }\n    static fromLong     ( data: number ) { return (new BinaryParser()).fromLong(data); }\n    static toDWord      ( data: number ) { return (new BinaryParser()).toDWord(data); }\n    static fromDWord    ( data: number ) { return (new BinaryParser()).fromDWord(data); }\n    static toQWord      ( data: number ) { return (new BinaryParser()).toQWord(data); }\n    static fromQWord    ( data: number ) { return (new BinaryParser()).fromQWord(data); }\n    static toFloat      ( data: number ) { return (new BinaryParser()).toFloat(data); }\n    static fromFloat    ( data: number ) { return (new BinaryParser()).fromFloat(data); }\n    static toDouble     ( data: number ) { return (new BinaryParser()).toDouble(data); }\n    static fromDouble   ( data: number ) { return (new BinaryParser()).fromDouble(data); }\n    \n    // Factor out the encode so it can be shared by add_header and push_int32\n    encode_int32(number, asArray) {\n        var a, b, c, d, unsigned;\n        \n        unsigned = (number < 0) ? (number + 0x100000000) : number;\n        a = Math.floor(unsigned / 0xffffff);\n        \n        unsigned &= 0xffffff;\n        b = Math.floor(unsigned / 0xffff);\n        \n        unsigned &= 0xffff;\n        c = Math.floor(unsigned / 0xff);\n        \n        unsigned &= 0xff;\n        d = Math.floor(unsigned);\n        \n        return asArray ? [chr(a), chr(b), chr(c), chr(d)] : chr(a) + chr(b) + chr(c) + chr(d);\n    }\n    \n    static encode_int32 ( number, asArray ) { return (new BinaryParser()).encode_int32(number, asArray); }\n    \n    encode_int64(number) {\n        var a, b, c, d, e, f, g, h, unsigned;\n        \n        unsigned = (number < 0) ? (number + 0x10000000000000000) : number;\n        a = Math.floor(unsigned / 0xffffffffffffff);\n        \n        unsigned &= 0xffffffffffffff;\n        b = Math.floor(unsigned / 0xffffffffffff);\n        \n        unsigned &= 0xffffffffffff;\n        c = Math.floor(unsigned / 0xffffffffff);\n        \n        unsigned &= 0xffffffffff;\n        d = Math.floor(unsigned / 0xffffffff);\n        \n        unsigned &= 0xffffffff;\n        e = Math.floor(unsigned / 0xffffff);\n        \n        unsigned &= 0xffffff;\n        f = Math.floor(unsigned / 0xffff);\n        \n        unsigned &= 0xffff;\n        g = Math.floor(unsigned / 0xff);\n        \n        unsigned &= 0xff;\n        h = Math.floor(unsigned);\n        \n        return chr(a) + chr(b) + chr(c) + chr(d) + chr(e) + chr(f) + chr(g) + chr(h);\n    }\n    \n    static encode_int64 ( number ) { return (new BinaryParser()).encode_int64(number); }\n    \n    /**\n     * UTF8 methods\n     */\n    \n    // Take a raw binary string and return a utf8 string\n    decode_utf8(binaryStr) {\n        var len = binaryStr.length,\n            decoded = '',\n            i = 0,\n            c = 0,\n            c1 = 0,\n            c2 = 0,\n            c3;\n        \n        while (i < len) {\n            c = binaryStr.charCodeAt(i);\n            \n            if (c < 128) {\n                decoded += String.fromCharCode(c);\n                \n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = binaryStr.charCodeAt(i+1);\n                decoded += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                \n                i += 2;\n            } else {\n                c2 = binaryStr.charCodeAt(i+1);\n                c3 = binaryStr.charCodeAt(i+2);\n                decoded += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n                \n                i += 3;\n            }\n        }\n        \n        return decoded;\n    }\n    \n    static decode_utf8 ( binaryStr ) { return (new BinaryParser()).decode_utf8(binaryStr); }\n    \n    // Encode a cstring\n    encode_cstring(s) {\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape\n        return encodeURIComponent(encodeURIComponent(s)) + this.fromByte(0);\n    }\n    \n    static encode_cstring ( s ) { return (new BinaryParser()).encode_cstring(s); }\n    \n    // Take a utf8 string and return a binary string\n    encode_utf8(s) {\n        var a = \"\",\n            c;\n    \n        for (var n = 0, len = s.length; n < len; n++) {\n            c = s.charCodeAt(n);\n    \n            if (c < 128) {\n                a += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                a += String.fromCharCode((c>>6) | 192) ;\n                a += String.fromCharCode((c&63) | 128);\n            } else {\n                a += String.fromCharCode((c>>12) | 224);\n                a += String.fromCharCode(((c>>6) & 63) | 128);\n                a += String.fromCharCode((c&63) | 128);\n            }\n        }\n    \n        return a;\n    }\n    \n    static encode_utf8 ( s ) { return (new BinaryParser()).encode_utf8(s); }\n    \n    hprint(s) {\n        var number;\n    \n        for (var i = 0, len = s.length; i < len; i++) {\n            if (s.charCodeAt(i) < 32) {\n                number = s.charCodeAt(i) <= 15 ? \"0\" + s.charCodeAt(i).toString(16) : s.charCodeAt(i).toString(16);\n                \n                this.logger.silly(number + \" \");\n            } else {\n                number = s.charCodeAt(i) <= 15 ? \"0\" + s.charCodeAt(i).toString(16) : s.charCodeAt(i).toString(16);\n                \n                this.logger.silly(number + \" \");\n            }\n        }\n        \n        this.logger.silly(\"\\n\\n\");\n        \n        return number;\n    }\n    \n    static hprint ( s ) { return (new BinaryParser()).hprint(s); }\n    \n    ilprint(s) {\n        var number;\n    \n        for (var i = 0, len = s.length; i < len; i++) {\n            if (s.charCodeAt(i) < 32) {\n                number = s.charCodeAt(i) <= 15 ? \"0\" + s.charCodeAt(i).toString(10) : s.charCodeAt(i).toString(10);\n                \n                this.logger.silly(number + \" \");\n            } else {\n                number = s.charCodeAt(i) <= 15 ? \"0\" + s.charCodeAt(i).toString(10) : s.charCodeAt(i).toString(10);\n                \n                this.logger.silly(number + \" \");\n            }\n        }\n        \n        this.logger.silly(\"\\n\\n\");\n        \n        return number;\n    }\n    \n    static ilprint ( s ) { return (new BinaryParser()).ilprint(s); }\n    \n    hlprint(s) {\n        var number;\n        \n        for (var i = 0, len = s.length; i < len; i++) {\n            if (s.charCodeAt(i) < 32) {\n                number = s.charCodeAt(i) <= 15 ? \"0\" + s.charCodeAt(i).toString(16) : s.charCodeAt(i).toString(16);\n                \n                this.logger.silly(number + \" \");\n            } else {\n                number = s.charCodeAt(i) <= 15 ? \"0\" + s.charCodeAt(i).toString(16) : s.charCodeAt(i).toString(16);\n                \n                this.logger.silly(number + \" \");\n            }\n        }\n        \n        this.logger.silly(\"\\n\\n\");\n        \n        return number;\n    }\n    \n    static hlprint ( s ) { return (new BinaryParser()).hlprint(s); }\n}\n\n\n\nexport { BinaryParser };"]}