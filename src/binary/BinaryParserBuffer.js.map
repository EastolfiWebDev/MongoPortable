{"version":3,"sources":["binary/BinaryParserBuffer.ts"],"names":[],"mappings":"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","file":"BinaryParserBuffer.js","sourcesContent":["import * as _               from \"lodash\";\nimport { JSWLogger }        from \"jsw-logger\";\n\n/**\n * BinaryParserBuffer\n * \n * @module BinaryParserBuffer\n * @since 0.0.1\n * @author Eduardo Astolfi <eastolfi91@gmail.com>\n * @copyright 2016 Eduardo Astolfi <eastolfi91@gmail.com>\n * @license MIT Licensed\n * \n * @classdesc BinaryParserBuffer - based on ({@link http://jsfromhell.com/classes/binary-parser Binary Parser}) by Jonas Raoni Soares Silva\n */\nclass BinaryParserBuffer {\n    protected logger: JSWLogger;\n    \n    bigEndian: number;\n    buffer: Array<any> = [];\n    \n    constructor(bigEndian, buffer: string|number) {\n        this.logger = JSWLogger.instance;\n        \n        this.bigEndian = bigEndian || 0;\n        \n        if (_.isString(buffer)) {\n            this.setBuffer(<string>buffer);\n        } else {\n            this.setBuffer(`${buffer}`);\n        }\n    }\n    \n    setBuffer(data: string) {\n        var l, i, b;\n        \n        if (data) {\n            i = l = data.length;\n            b = this.buffer = new Array(l);\n            \n            for (; i; b[l - i] = data.charCodeAt(--i));\n            \n            this.bigEndian && b.reverse();\n        }\n    }\n    \n    hasNeededBits(neededBits) {\n        return this.buffer.length >= -(-neededBits >> 3);\n    }\n    \n    checkBuffer(neededBits) {\n        if (!this.hasNeededBits(neededBits)) {\n            this.logger.throw(\"checkBuffer::missing bytes\");\n        }\n    }\n    \n    readBits(start: number, length: number) {\n        //shl fix: Henri Torgemane ~1996 (compressed by Jonas Raoni)\n    \n        function shl (a, b) {\n            for (; b--; a = ((a %= 0x7fffffff + 1) & 0x40000000) == 0x40000000 ? a * 2 : (a - 0x40000000) * 2 + 0x7fffffff + 1);\n            \n            return a;\n        }\n    \n        if (start < 0 || length <= 0) {\n            return 0;\n        }\n    \n        this.checkBuffer(start + length);\n    \n        var offsetLeft,\n            offsetRight = start % 8,\n            curByte = this.buffer.length - ( start >> 3 ) - 1,\n            lastByte = this.buffer.length + ( -( start + length ) >> 3 ),\n            diff = curByte - lastByte,\n            sum = ((this.buffer[ curByte ] >> offsetRight) & ((1 << (diff ? 8 - offsetRight : length)) - 1)) + (diff && (offsetLeft = (start + length) % 8) ? (this.buffer[lastByte++] & ((1 << offsetLeft) - 1)) << (diff-- << 3) - offsetRight : 0);\n    \n        for(; diff; sum += shl(this.buffer[lastByte++], (diff-- << 3) - offsetRight));\n    \n        return sum;\n    }\n}\n\nexport { BinaryParserBuffer };"]}