{"version":3,"sources":["aggregation/Aggregation.ts"],"names":[],"mappings":"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","file":"Aggregation.js","sourcesContent":["/**\n * @file Cursor.js - based on Monglo#Cursor ({@link https://github.com/Monglo}) by Christian Sullivan <cs@euforic.co> | Copyright (c) 2012\n * @version 1.0.0\n * \n * @author Eduardo Astolfi <eduardo.astolfi91@gmail.com>\n * @copyright 2016 Eduardo Astolfi <eduardo.astolfi91@gmail.com>\n * @license MIT Licensed\n */\n\nimport * as _ from \"lodash\";\nimport { JSWLogger } from \"jsw-logger\";\n\nimport { Selector } from \"../selector\";\nimport { Cursor } from \"../Cursor\";\n    \nvar stages = {\n    '$project': true,\n    '$match': true,\n    '$redact': false,\n    '$limit': false,\n    '$skip': false,\n    '$unwind': false,\n    '$group': true,\n    '$sample': false,\n    '$sort': true,\n    '$geoNear': false,\n    '$lookup': false,\n    '$out': false,\n    '$indexStats': false\n};\n\nvar group_operators = {\n    $sum: function(documents, new_id, new_field, value, isCount) {\n        var new_docs = {};\n        \n        for (let i = 0; i < documents.length; i++) {\n            let doc = documents[i];\n            let val = value;\n            \n            if (!isCount) {\n                val = doc[value.substr(1, value.length)] || 0;\n            }\n            \n            if (_.hasIn(doc, new_id)) {\n                let _id = doc[new_id];\n                \n                if (!_.hasIn(new_docs, _id)) {\n                    new_docs[_id] = {\n                        _id: _id,\n                        [new_field]: _.toNumber(val)\n                    };\n                } else {\n                    new_docs[_id][new_field] += _.toNumber(val);\n                }\n            }\n        }\n        \n        return new_docs;\n    },\n    \n    $avg: function(documents, new_id, new_field, value, isCount) {\n        var new_docs = {};\n        \n        for (let i = 0; i < documents.length; i++) {\n            let doc = documents[i];\n            let val = value;\n            \n            if (!isCount) {\n                val = doc[value.substr(1, value.length)] || 0;\n            }\n            \n            if (_.hasIn(doc, new_id) || _.isNull(new_id)) {\n                let _id = doc[new_id] || null;\n                \n                if (!_.hasIn(new_docs, _id)) {\n                    new_docs[_id] = {\n                        _id: _id,\n                        [new_field]: _.toNumber(val),\n                        __COUNT__: 1\n                    };\n                } else {\n                    new_docs[_id][new_field] += _.toNumber(val);\n                    new_docs[_id].__COUNT__++;\n                }\n            }\n        }\n        \n        for (let key in new_docs) {\n            new_docs[key][new_field] = new_docs[key][new_field] / new_docs[key].__COUNT__;\n            delete new_docs[key].__COUNT__;\n        }\n        \n        return new_docs;\n    } \n};\n\nvar do_single_group = function(group_id, group_stage, documents) {\n    // var operators = {};\n    \n    let docs = {};\n    \n    for (let field in group_stage) {\n        if (field !== '_id') {\n            // handle group field\n            // let group_key = key;\n            let group_field = group_stage[field];\n            \n            for (let key in group_field) {\n                if (!_.hasIn(group_operators, key)) this.logger.throw(`Unknown accumulator operator \"${key}\" for group stage`);\n                \n                // loop through all documents\n                // var new_docs = {};\n                // for (let i = 0; i < documents.length; i++) {\n                //     let doc = documents[i];\n                    \n                //     if (_.hasIn(doc, group_id)) {\n                //         let _id = doc[group_id];\n                        \n                //         if (!_.hasIn(new_docs, _id)) {\n                //             new_docs[_id] = {\n                //                 _id: _id,\n                //                 [new_field]: value\n                //             };\n                //         } else {\n                //             new_docs[_id][new_field] += value;\n                //         }\n                //     }\n                // }\n                \n                // if (!_.hasIn(operators, key)) operators[key] = [];\n                \n                // operators[key].push({\n                //     new_field: field,\n                //     value: group_field[key]\n                // });\n                \n                let count = true;\n                if (_.isString(group_field[key])) {\n                    if (group_field[key].substr(0, 1) !== '$') this.logger.throw(\"Field names references in a right side assignement must be preceded by '$'\");\n                    \n                    if (!_.isFinite(_.toNumber(group_field[key]))) {\n                        count = false;\n                    }\n                }\n                \n                let operator = group_operators[key];\n                \n                _.merge(docs, operator(documents, group_id, field, group_field[key], count));\n                \n                break;\n            }\n        }\n    }\n    \n    return _.values(docs);\n};\n\nvar do_complex_group = function() {\n    \n};\n\nvar do_sort = function(documents, sort_stage) {\n    return documents.sort(new Selector(sort_stage, Selector.SORT_SELECTOR));\n};\n\nvar do_match = function(documents, match_stage) {\n    var cursor = new Cursor(documents, match_stage);\n    \n    return cursor.fetch();\n};\n\nvar do_group = function(documents, group_stage) {\n    if (!_.hasIn(group_stage, '_id')) this.logger.throw('The field \"_id\" is required in the \"$group\" stage');\n    \n    let new_id = group_stage['_id'];\n    \n    if (!_.isNull(new_id)) {\n        if (new_id.substr(0, 1) !== '$') {\n            this.logger.throw(\"Field names references in a right side assignement must be preceded by '$'\");\n        } else {\n            new_id = new_id.substr(1, new_id.length);\n        }\n    }\n                \n    if (_.isPlainObject(new_id)) {\n        // complex_id\n        // do_complex_group();\n    } else {\n        // single_id\n        return do_single_group(new_id, group_stage, documents);\n    }\n};\n\nvar do_project = function(documents, project_stage) {\n    return Cursor.project(documents, project_stage, true);\n};\n\nclass Aggregation {\n    protected logger: JSWLogger;\n    \n    pipeline;\n    \n    constructor(pipeline) {\n        this.logger = JSWLogger.instance;\n        \n        this.pipeline = pipeline;\n    }\n    \n    aggregate(collection) {\n        var docs = collection.docs;\n        \n        for (let i = 0; i < this.pipeline.length; i++) {\n            let stage = this.pipeline[i];\n            \n            for (let key in stage) {\n                switch (key) {\n                    case '$project':\n                        docs = do_project(docs, stage[key]);\n                        \n                        break;\n                    case '$match':\n                        docs = do_match(docs, stage[key]);\n                        \n                        break;\n                    case '$group':\n                        docs = do_group(docs, stage[key]);\n                        \n                        break;\n                    case '$sort':\n                        docs = do_sort(docs, stage[key]);\n                        \n                        break;\n                }\n            }\n        }\n        \n        return docs;    // move to cursor\n    }\n    \n    validStage(stage) {\n        if (!_.hasIn(stages, stage)) return this.logger.throw(`Unknown stage \"${stage}\"`);\n        \n        if (stages[stage] === false) return this.logger.throw(`Unsupported stage \"${stage}\"`);\n        \n        return true;\n    }\n}\n\n\nexport { Aggregation };"]}