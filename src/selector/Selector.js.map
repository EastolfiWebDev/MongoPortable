{"version":3,"sources":["selector/Selector.ts"],"names":[],"mappings":"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","file":"Selector.js","sourcesContent":["import * as _                   from \"lodash\";\nimport { JSWLogger }            from \"jsw-logger\";\n\nimport { SelectorMatcher }      from \"./SelectorMatcher\";\n\nimport { ObjectId }             from \"../document\";\n\n\nclass Clause {\n    key: string;\n    kind: string;\n    type: string;\n    value: any;\n}\n\nclass Selector {\n    protected logger: JSWLogger;\n    \n    static MATCH_SELECTOR = \"match\";\n    static SORT_SELECTOR = \"sort\";\n    static FIELD_SELECTOR = \"field\";\n    static AGG_FIELD_SELECTOR = \"project\";\n    \n    selector_compiled;\n    clauses;\n    \n    constructor(selector, type = Selector.MATCH_SELECTOR) {\n        this.logger = JSWLogger.instance;\n        \n        this.selector_compiled = null;\n\t\t\n\t\tif (type === Selector.MATCH_SELECTOR) {\n\t\t\tthis.selector_compiled = this.compile(selector);\n\t\t} else if (type === Selector.SORT_SELECTOR) {\n\t\t\treturn this.compileSort(selector);\n\t\t} else if (type === Selector.FIELD_SELECTOR) {\n\t\t\treturn this.compileFields(selector, false);\n\t\t} else if (type === Selector.AGG_FIELD_SELECTOR) {\n\t\t\treturn this.compileFields(selector, true);\n\t\t} else {\n\t\t\tthis.logger.throw(\"You need to specify the selector type\");\n\t\t}\n    }\n    \n    private __buildSelector(selector) {\n    \tthis.logger.debug(\"Called: __buildSelector\");\n        \n        var clauses = [];\n        \n        for (var key in selector) {\n            var value = selector[key];\n            \n            if (key.charAt(0) === \"$\") {\n                this.logger.debug(\"selector -> operator => { $and: [{...}, {...}] }\");\n                \n                clauses.push(this.__buildDocumentSelector(key, value));\n            } else {\n                this.logger.debug(\"selector -> plain => { field1: <value> }\");\n                \n                clauses.push(this.__buildKeypathSelector(key, value));\n            }\n        }\n        \n        return clauses;\n    }\n    \n    private __buildDocumentSelector(key, value) {\n        let clause: Clause = new Clause();\n        \n        switch (key) {\n            case \"$or\":\n            case \"$and\":\n            case \"$nor\":\n                clause.key = key.replace(/\\$/, \"\");\n                // The rest will be handled by \"_operator_\"\n            case \"_operator_\":\n                // Generic handler for operators ($or, $and, $nor)\n                \n                clause.kind = \"operator\";\n                clause.type = \"array\";\n                \n                clause.value = [];\n                for (let i = 0; i < value.length; i++) {\n                    clause.value = _.union(clause.value, this.__buildSelector(value[i]));\n                }\n                \n                break;\n            default:\n                this.logger.throw(\"Unrecogized key in selector: %s\", key);\n        }\n        \n        // TODO cases: $where, $elemMatch\n        \n        this.logger.debug(\"clause created: \" + JSON.stringify(clause));\n        \n        return clause;\n    }\n    \n    private __buildKeypathSelector(keypath, value) {\n        this.logger.debug(\"Called: __buildKeypathSelector\");\n        \n        let clause: Clause = new Clause();\n        \n        clause.value = value;\n        \n        if (_.isNil(value)) {\n            this.logger.debug(\"clause of type null\");\n            \n            clause.type = \"null\";\n        } else if (_.isRegExp(value)) {\n            this.logger.debug(\"clause of type RegExp\");\n    \n            clause.type = \"regexp\";\n            \n            let source = value.toString().split(\"/\");\n    \n            clause.value = {\n                $regex: source[1]   // The first item splitted is an empty string\n            };\n            \n            if (source[2] != \"\") {\n                clause.value[\"$options\"] = source[2];\n            }\n        } else if (_.isArray(value)) {\n            this.logger.debug(\"clause of type Array\");\n            \n            clause.type = \"array\";\n        } else if (_.isString(value)) {\n            this.logger.debug(\"clause of type String\");\n            \n            clause.type = \"string\";\n        } else if (_.isNumber(value)) {\n            this.logger.debug(\"clause of type Number\");\n            \n            clause.type = \"number\";\n        } else if (_.isBoolean(value)) {\n            this.logger.debug(\"clause of type Boolean\");\n            \n            clause.type = \"boolean\";\n        } else if (_.isFunction(value)) {\n            this.logger.debug(\"clause of type Function\");\n            \n            clause.type = \"function\";\n        } else if (_.isPlainObject(value)) {\n            var literalObject = true;\n            for (let key in value) {\n                if (key.charAt(0) === \"$\") {\n                    literalObject = false;\n                    \n                    break;\n                }\n            }\n            \n            if (literalObject) {\n                this.logger.debug(\"clause of type Object => { field: { field_1: <value>, field_2: <value> } }\");\n                \n                clause.type = \"literal_object\";\n            } else {\n                this.logger.debug(\"clause of type Operator => { field: { $gt: 2, $lt 5 } }\");\n                \n                clause.type = \"operator_object\";\n            }\n        } else if (value instanceof ObjectId) {\n            this.logger.debug(\"clause of type ObjectId -> String\");\n            \n            clause.type = \"string\";\n            clause.value = value.toString();\n        } else {\n            clause.type = \"__invalid__\";\n        }\n        \n        let parts = keypath.split(\".\");\n        if (parts.length > 1) {\n            this.logger.debug(\"clause over Object field => { \\\"field1.field1_2\\\": <value> }\");\n            \n            clause.kind = \"object\";\n            clause.key = parts;\n        } else {\n            this.logger.debug(\"clause over Plain field => { \\\"field\\\": <value> }\");\n            \n            clause.kind = \"plain\";\n            clause.key = parts[0];\n        }\n        \n        this.logger.debug(\"clause created: \" + JSON.stringify(clause));\n        \n        return clause;\n    }\n    \n    test(doc) {\n        return this.selector_compiled.test(doc);\n    }\n    \n    compile(selector) {\n\t\tif (_.isNil(selector)) {\n\t\t\tthis.logger.debug(\"selector -> null\");\n\t\t\t\n\t\t\tselector = {};\n\t\t} else {\n\t\t\tthis.logger.debug(\"selector -> not null\");\n\t\t\t\n\t\t\tif (!selector || (_.hasIn(selector, \"_id\") && !selector._id)) {\n\t\t\t\tthis.logger.debug(\"selector -> false value || { _id: false value }\");\n\t\t\t\t\n\t\t\t\tselector = {\n\t\t\t\t\t_id: false\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (_.isFunction(selector)) {\n\t\t\tthis.logger.debug(\"selector -> function(doc) { ... }\");\n\t\t\t\n\t\t\t//_initFunction.call(matcher, selector);\n\t\t\tthis.clauses = [{\n\t\t\t\tkind: \"function\",\n\t\t\t\tvalue: selector\n\t\t\t}];\n\t\t\t\n\t\t\tthis.logger.debug(\"clauses created: \" + JSON.stringify(this.clauses));\n\t\t} else if (_.isString(selector) || _.isNumber(selector)) {\n\t\t\tthis.logger.debug(\"selector -> \\\"123456789\\\" || 123456798\");\n\t\t\t\n\t\t\tselector = {\n\t\t\t\t_id: selector\n\t\t\t};\n\t\t\t\n\t\t\t//_initObject.call(matcher, selector);\n\t\t\tthis.clauses = this.__buildSelector(selector);\n\t\t\t\n\t\t\tthis.logger.debug(\"clauses created: \" + JSON.stringify(this.clauses));\n\t\t} else {\n\t\t\tthis.logger.debug(\"selector -> { field: value }\");\n\t\t\t\n\t\t\t//_initObject.call(matcher, selector);\n\t\t\tthis.clauses = this.__buildSelector(selector);\n\t\t\t\n\t\t\tthis.logger.debug(\"clauses created: \" + JSON.stringify(this.clauses));\n\t\t}\n\t\t\n\t\tvar matcher = new SelectorMatcher(this);\n\t\t\n\t\treturn matcher;\n    }\n    \n    compileSort(spec) {\n        if (_.isNil(spec))  {\n            return function () {\n                return 0;\n            };\n        }\n        \n        var keys = [];\n        var asc = [];\n        \n        if (_.isString(spec)) {\n            spec = spec.replace(/( )+/ig, \" \").trim();\n            \n            if (spec.indexOf(\",\") !== -1) {\n                // Replace commas by spaces, and treat it as a spaced-separated string\n                return this.compileSort(spec.replace(/,/ig, \" \"));\n            } else if (spec.indexOf(\" \") !== -1) {\n                var fields = spec.split(\" \");\n                \n                for (var i = 0; i < fields.length; i++) {\n                    var field = fields[i].trim();\n                    \n                    if ((field === \"desc\"  || field === \"asc\") ||\n                        (field === \"-1\"    || field === \"1\") ||\n                        (field === \"false\" || field === \"true\")) {\n                            \n                        this.logger.throw(\"Bad sort specification: %s\", JSON.stringify(spec));\n                    } else {\n                        var next = _.toString(fields[i+1]);\n                        \n                        if (next === \"desc\" || next === \"asc\") {\n                            keys.push(field);\n                            asc.push((next === \"asc\") ? true : false);\n                            \n                            i++;\n                        } else if (next === \"-1\" || next === \"1\") {\n                            keys.push(field);\n                            asc.push((next === \"1\") ? true : false);\n                            \n                            i++;\n                        } else if (next === \"false\" || next === \"true\") {\n                            keys.push(field);\n                            asc.push((next === \"true\") ? true : false);\n                            \n                            i++;\n                        } else {\n                            keys.push(field);\n                            asc.push(true); // Default sort\n                        }\n                    }\n                }\n            } else {\n                //.sort(\"field1\")\n                \n                keys.push(spec);\n                asc.push(true);\n            }\n        } else if (_.isArray(spec)) {\n            // Join the array with spaces, and treat it as a spaced-separated string\n            return this.compileSort(spec.join(\" \"));\n            // for (var i = 0; i < spec.length; i++) {\n            //     if (_.isString(spec[i])) {\n            //         keys.push(spec[i]);\n            //         asc.push(true);\n            //     } else {\n            //         keys.push(spec[i][0]);\n            //         asc.push(spec[i][1] !== \"desc\");\n            //     }\n            // }\n        } else if (_.isPlainObject(spec)) {\n            // TODO Nested path -> .sort({ \"field1.field12\": \"asc\" })\n            var _spec = [];\n            for (var key in spec) {\n                if (_.hasIn(spec, key)) {\n                    _spec.push(key);\n                    _spec.push(spec[key]);\n                }\n            }\n            \n            return this.compileSort(_spec);\n        } else {\n            this.logger.throw(\"Bad sort specification: %s\", JSON.stringify(spec));\n        }\n    \n        // return {keys: keys, asc: asc};\n        return function(a, b) {\n            var x = 0;\n            \n            for (var i = 0; i < keys.length; i++) {\n                if (i !== 0 && x !== 0) return x;   // Non reachable?\n                \n                \n                // x = Selector._f._cmp(a[JSON.stringify(keys[i])], b[JSON.stringify(keys[i])]);\n                x = SelectorMatcher.cmp(a[keys[i]], b[keys[i]]);\n                \n                if (!asc[i]) {\n                    x *= -1;\n                }\n            }\n            \n            return x;\n        };\n        \n        // eval() does not return a value in IE8, nor does the spec say it\n        // should. Assign to a local to get the value, instead.\n        \n        // var _func;\n        // var code = \"_func = (function(c){return function(a,b){var x;\";\n        // for (var i = 0; i < keys.length; i++) {\n        //     if (i !== 0) {\n        //         code += \"if(x!==0)return x;\";\n        //     }\n    \n        //     code += \"x=\" + (asc[i] ? \"\" : \"-\") + \"c(a[\" + JSON.stringify(keys[i]) + \"],b[\" + JSON.stringify(keys[i]) + \"]);\";\n        // }\n    \n        // code += \"return x;};})\";\n    \n        // eval(code);\n    \n        // return _func(Selector._f._cmp);\n    }\n    \n    compileFields(spec, aggregation) {\n        var projection = {};\n        \n        if (_.isNil(spec)) return projection;\n        \n        if (_.isString(spec)) {\n            // trim surrounding and inner spaces\n            spec = spec.replace(/( )+/ig, \" \").trim();\n            \n            // Replace the commas by spaces\n            if (spec.indexOf(\",\") !== -1) {\n                // Replace commas by spaces, and treat it as a spaced-separated string\n                return this.compileFields(spec.replace(/,/ig, \" \"), aggregation);\n            } else if (spec.indexOf(\" \") !== -1) {\n                var fields = spec.split(\" \");\n                \n                for (var i = 0; i < fields.length; i++) {\n                    // Get the field from the spec (we will be working with pairs)\n                    var field = fields[i].trim();\n                    \n                    // If the first is not a field, throw error\n                    if ((field === \"-1\"    || field === \"1\") ||\n                        (field === \"false\" || field === \"true\")) {\n                            \n                        this.logger.throw(\"Bad fields specification: %s\", JSON.stringify(spec));\n                    } else {\n                        // Get the next item of the pair\n                        var next = _.toString(fields[i+1]);\n                        \n                        if (next === \"-1\" || next === \"1\") {\n                            if (next === \"-1\") {\n                                for (let _key in projection) {\n                                    if (field !== \"_id\" && projection[_key] === 1) {\n                                        this.logger.throw(\"A projection cannot contain both include and exclude specifications\");\n                                    }\n                                }\n                                \n                                projection[field] = -1;\n                            } else {\n                                projection[field] = 1;\n                            }\n                            \n                            i++;\n                        } else if (next === \"false\" || next === \"true\") {\n                            if (next === \"false\") {\n                                if (field === \"_id\") {\n                                    projection[field] = -1;\n                                } else {\n                                    this.logger.throw(\"A projection cannot contain both include and exclude specifications\");\n                                }\n                            } else {\n                                projection[field] = 1;\n                            }\n                            \n                            i++;\n                        } else if (aggregation && next.indexOf(\"$\") === 0) {\n                            projection[field] = next.replace(\"$\", \"\");\n                            \n                            i++;\n                        } else {\n                            projection[field] = 1;\n                        }\n                    }\n                }\n            } else if (spec.length > 0) {\n                //.find({}, \"field1\")\n                \n                projection[spec] = 1;\n            }\n        } else if (_.isArray(spec)) {\n            // Join the array with spaces, and treat it as a spaced-separated string\n            return this.compileFields(spec.join(\" \"), aggregation);\n        } else if (_.isPlainObject(spec)) {\n            // TODO Nested path -> .find({}, { \"field1.field12\": \"asc\" })\n            var _spec = [];\n            for (var key in spec) {\n                if (_.hasIn(spec, key)) {\n                    _spec.push(key);\n                    _spec.push(spec[key]);\n                }\n            }\n            \n            return this.compileFields(_spec, aggregation);\n        } else {\n            this.logger.throw(\"Bad fields specification: %s\", JSON.stringify(spec));\n        }\n        \n        return projection;\n    }\n\t\n\t/* STATIC METHODS */\n\tstatic isSelectorCompiled(selector) {\n\t\tif (!_.isNil(selector) && (\n\t\t    selector instanceof SelectorMatcher || (selector instanceof Selector && \n\t\t                                            selector.selector_compiled instanceof SelectorMatcher)\n\t    )) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tstatic matches(selector, doc) {\n        return (new Selector(selector)).test(doc);\n    }\n}\n\nexport { Selector };"]}