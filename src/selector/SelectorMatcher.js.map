{"version":3,"sources":["selector/SelectorMatcher.ts"],"names":[],"mappings":"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","file":"SelectorMatcher.js","sourcesContent":["import * as _ from \"lodash\";\nimport { JSWLogger } from \"jsw-logger\";\n\nclass SelectorMatcher {\n    protected logger: JSWLogger;\n    \n    clauses;\n    \n\tconstructor(selector) {\n        this.clauses = selector.clauses;\n\n        this.logger = JSWLogger.instance;\n\t}\n\t\n\ttest(document) {\n\t\tthis.logger.debug(\"Called SelectorMatcher->test\");\n\t\t\n\t\tvar _match: boolean = false;\n\n\t\tif (_.isNil(document)) {\n\t\t\tthis.logger.debug(\"document -> null\");\n\t\t\t\n\t\t\tthis.logger.throw(\"Parameter \\\"document\\\" required\");\n\t\t}\n\t\t\n\t\tthis.logger.debug(\"document -> not null\");\n\t\t\n\t\tfor (var i = 0; i < this.clauses.length; i++) {\n\t\t\tvar clause = this.clauses[i];\n\t\t\t\n\t\t\tif (clause.kind === \"function\") {\n\t\t\t\tthis.logger.debug(\"clause -> function\");\n\t\t\t\t\n\t\t\t\t_match = clause.value.call(null, document);\n\t\t\t} else if (clause.kind === \"plain\") {\n\t\t\t\tthis.logger.debug(`clause -> plain on field \"${clause.key}\" and value = ${JSON.stringify(clause.value)}`);\n\t\t\t\t\n\t\t\t\t_match = _testClause(clause, document[clause.key]);\n\t\t\t\t\n\t\t\t\tthis.logger.debug(\"clause result -> \" + _match);\n\t\t\t} else if (clause.kind === \"object\") {\n\t\t\t\tthis.logger.debug(`clause -> object on field \"${clause.key.join(\".\")}\" and value = ${JSON.stringify(clause.value)}`);\n\t\t\t\t\n\t\t\t\t_match = _testObjectClause(clause, document, _.clone(clause.key).reverse());\n\t\t\t\t\n\t\t\t\tthis.logger.debug(\"clause result -> \" + _match);\n\t\t\t} else if (clause.kind === \"operator\") {\n\t\t\t    this.logger.debug(`clause -> operator \"${clause.key}\"`);\n\t\t\t    \n\t\t\t    _match = _testLogicalClause(clause, document, clause.key);\n\t\t        \n\t\t\t\tthis.logger.debug(\"clause result -> \" + _match);\n\t\t\t}\n\t\t\t\n\t\t\t// If any test case fails, the document will not match\n\t\t\tif (_match === false/* || <string>_match === \"false\"*/) {\n\t\t\t\tthis.logger.debug(\"the document do not matches\");\n\t\t\t\t\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Everything matches\n\t\tthis.logger.debug(\"the document matches\");\n\t\t\n\t\treturn true;\n\t}\n\t\n\tstatic all(array, value) {\n        // $all is only meaningful on arrays\n        if (!(array instanceof Array)) {\n            return false;\n        }\n\n        // TODO should use a canonicalizing representation, so that we\n        // don\"t get screwed by key order\n        var parts = {};\n        var remaining = 0;\n\n        _.forEach(value, function (val) {\n            var hash = JSON.stringify(val);\n\n            if (!(hash in parts)) {\n                parts[hash] = true;\n                remaining++;\n            }\n        });\n\n        for (var i = 0; i < array.length; i++) {\n            var hash = JSON.stringify(array[i]);\n            if (parts[hash]) {\n                delete parts[hash];\n                remaining--;\n\n                if (0 === remaining) return true;\n            }\n        }\n\n        return false;\n    }\n\t\n\tstatic in(array, value) {\n        if (!_.isObject(array)) {\n            // optimization: use scalar equality (fast)\n            for (var i = 0; i < value.length; i++) {\n                if (array === value[i]) {\n                    return true;\n                }\n            }\n\n            return false;\n        } else {\n            // nope, have to use deep equality\n            for (var i = 0; i < value.length; i++) {\n                if (SelectorMatcher.equal(array, value[i])) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    }\n\t\n\t// deep equality test: use for literal document and array matches\n\tstatic equal(array, qval) {\n        var match = function (a, b) {\n            // scalars\n            if (_.isNumber(a) || _.isString(a) || _.isBoolean(a) || _.isNil(a)) return a === b;\n\n            if (_.isFunction(a)) return false;  // Not allowed yet\n\n            // OK, typeof a === \"object\"\n            if (!_.isObject(b)) return false;\n\n            // arrays\n            if (_.isArray(a)) {\n                if (!_.isArray(b)) return false;\n\n                if (a.length !== b.length) return false;\n\n                for (let i = 0; i < a.length; i++) {\n                    if (!match(a[i],b[i])) return false;\n                }\n\n                return true;\n            }\n\n            // objects\n            /*\n            var unmatched_b_keys = 0;\n            for (var x in b)\n                unmatched_b_keys++;\n            for (var x in a) {\n                if (!(x in b) || !match(a[x], b[x]))\n                    return false;\n                unmatched_b_keys--;\n            }\n            return unmatched_b_keys === 0;\n            */\n            // Follow Mongo in considering key order to be part of\n            // equality. Key enumeration order is actually not defined in\n            // the ecmascript spec but in practice most implementations\n            // preserve it. (The exception is Chrome, which preserves it\n            // usually, but not for keys that parse as ints.)\n            var b_keys = [];\n\n            for (var array in b) {\n                b_keys.push(b[array]);\n            }\n\n            let i = 0;\n            for (let array in a) {\n                if (i >= b_keys.length) return false;\n\n                if (!match(a[array], b_keys[i])) return false;\n\n                i++;\n            }\n            if (i !== b_keys.length) return false;\n\n            return true;\n        };\n\n        return match(array, qval);\n    }\n\t\n\t// if x is not an array, true iff f(x) is true. if x is an array,\n    // true iff f(y) is true for any y in x.\n    //\n    // this is the way most mongo operators (like $gt, $mod, $type..)\n    // treat their arguments.\n    static matches(value, func) {\n        if (_.isArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                if (func(value[i])) return true;\n            }\n\n            return false;\n        }\n\n        return func(value);\n    }\n\t\n\t// like _matches, but if x is an array, it\"s true not only if f(y)\n    // is true for some y in x, but also if f(x) is true.\n    //\n    // this is the way mongo value comparisons usually work, like {x:\n    // 4}, {x: [4]}, or {x: {$in: [1,2,3]}}.\n    static matches_plus(value, func) {\n        // if (_.isArray(value)) {\n        //     for (var i = 0; i < value.length; i++) {\n        //         if (func(value[i])) return true;\n        //     }\n\n        //     // fall through!\n        // }\n\n        // return func(value);\n        return SelectorMatcher.matches(value, func) || func(value);\n    }\n\t\n\t// compare two values of unknown type according to BSON ordering\n    // semantics. (as an extension, consider \"undefined\" to be less than\n    // any other value.)\n    // return negative if a is less, positive if b is less, or 0 if equal\n    static cmp(a, b) {\n        if (_.isUndefined(a)) return b === undefined ? 0 : -1;\n\n        if (_.isUndefined(b)) return 1;\n\t\t\n        var aType = BsonTypes.getByValue(a);\n        var bType = BsonTypes.getByValue(b);\n\n        if (aType.order !== bType.order) return aType.order < bType.order ? -1 : 1;\n\n        // Same sort order, but distinct value type\n        if (aType.number !== bType.number) {\n            // Currently, Symbols can not be sortered in JS, so we are setting the Symbol as greater\n            if (_.isSymbol(a)) return 1;\n            if (_.isSymbol(b)) return -1;\n            \n            // TODO Integer, Date and Timestamp\n        }\n        \n        if (_.isNumber(a)) return a - b;\n        \n        if (_.isString(a)) return a < b ? -1 : (a === b ? 0 : 1);\n        \n        if (_.isBoolean(a)) {\n            if (a) return b ? 0 : 1;\n\n            return b ? -1 : 0;\n        }\n        \n        if (_.isArray(a)) {\n            for (var i = 0; ; i++) {\n                if (i === a.length) return (i === b.length) ? 0 : -1;\n\n                if (i === b.length) return 1;\n                \n                if (a.length !== b.length) return a.length - b.length;\n\n                var s = SelectorMatcher.cmp(a[i], b[i]);\n\n                if (s !== 0) return s;\n            }\n        }\n        \n        if (_.isNull(a)) return 0;\n        \n        if (_.isRegExp(a)) throw Error(\"Sorting not supported on regular expression\"); // TODO\n        \n        // if (_.isFunction(a)) return {type: 13, order: 100, fnc: _.isFunction};\n        \n        if (_.isPlainObject(a)) {\n            var to_array = function (obj) {\n                var ret = [];\n\n                for (var key in obj) {\n                    ret.push(key);\n                    ret.push(obj[key]);\n                }\n\n                return ret;\n            };\n\n            return SelectorMatcher.cmp(to_array(a), to_array(b));\n        }\n\n        // double\n        // if (ta === 1)  return a - b;\n\n        // string\n        // if (tb === 2) return a < b ? -1 : (a === b ? 0 : 1);\n\n        // Object\n        // if (ta === 3) {\n        //     // this could be much more efficient in the expected case ...\n        //     var to_array = function (obj) {\n        //         var ret = [];\n\n        //         for (var key in obj) {\n        //             ret.push(key);\n        //             ret.push(obj[key]);\n        //         }\n\n        //         return ret;\n        //     };\n\n        //     return Selector._f._cmp(to_array(a), to_array(b));\n        // }\n\n        // Array\n        // if (ta === 4) {\n        //     for (var i = 0; ; i++) {\n        //         if (i === a.length) return (i === b.length) ? 0 : -1;\n\n        //         if (i === b.length) return 1;\n                \n        //         if (a.length !== b.length) return a.length - b.length;\n\n        //         var s = Selector._f._cmp(a[i], b[i]);\n\n        //         if (s !== 0) return s;\n        //     }\n        // }\n\n        // 5: binary data\n        // 7: object id\n\n        // boolean\n        // if (ta === 8) {\n        //     if (a) return b ? 0 : 1;\n\n        //     return b ? -1 : 0;\n        // }\n\n        // 9: date\n\n        // null\n        // if (ta === 10) return 0;\n\n        // regexp\n        // if (ta === 11) {\n        //     throw Error(\"Sorting not supported on regular expression\"); // TODO\n        // }\n\n        // 13: javascript code\n        // 14: symbol\n        if (_.isSymbol(a)) {\n            // Currently, Symbols can not be sortered in JS, so we are returning an equality\n            return 0;\n        }\n        // 15: javascript code with scope\n        // 16: 32-bit integer\n        // 17: timestamp\n        // 18: 64-bit integer\n        // 255: minkey\n        // 127: maxkey\n\n        // javascript code\n        // if (ta === 13) {\n        //     throw Error(\"Sorting not supported on Javascript code\"); // TODO\n        // }\n    }\n}\n\nvar _testClause = function(clause, val) {\n    this.logger.debug(\"Called _testClause\");\n    \n    // var _val = clause.value;\n    \n    // if RegExp || $ -> Operator\n    \n    return SelectorMatcher.matches_plus(val, function(_value) {\n        // TODO object ids, dates, timestamps?\n        switch (clause.type) {\n            case \"null\":\n                this.logger.debug(\"test Null equality\");\n                \n                // http://www.mongodb.org/display/DOCS/Querying+and+nulls\n                if (_.isNil(_value)) {\n                    return true;\n                } else {\n                    return false;\n                }\n            case \"regexp\":\n                this.logger.debug(\"test RegExp equality\");\n                \n                return _testOperatorClause(clause, _value);\n            case \"literal_object\":\n                this.logger.debug(\"test Literal Object equality\");\n                \n                return SelectorMatcher.equal(_value, clause.value);\n            case \"operator_object\":\n                this.logger.debug(\"test Operator Object equality\");\n                \n                return _testOperatorClause(clause, _value);\n            case \"string\":\n                this.logger.debug(\"test String equality\");\n                \n                return _.toString(_value) === _.toString(clause.value);\n            case \"number\":\n                this.logger.debug(\"test Number equality\");\n                \n                return _.toNumber(_value) === _.toNumber(clause.value);\n            case \"boolean\":\n                this.logger.debug(\"test Boolean equality\");\n                \n                return (_.isBoolean(_value) && _.isBoolean(clause.value) && (_value === clause.value));\n            case \"array\":\n                this.logger.debug(\"test Boolean equality\");\n                \n                // Check type\n                if (_.isArray(_value) && _.isArray(clause.value)) {\n                    // Check length\n                    if (_value.length === clause.value.length) {\n                        // Check items\n                        for (let i = 0; i < _value.length; i++) {\n                            if (clause.value.indexOf(_value[i]) === -1) {\n                                return false;\n                            }\n                        }\n                        \n                        return true;\n                    } else {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            case \"function\":\n                this.logger.debug(\"test Function equality\");\n                \n                throw Error(\"Bad value type in query\");\n            default:\n                throw Error(\"Bad value type in query\");\n        }\n    });\n};\n\nvar _testObjectClause = function(clause, doc, key) {\n    this.logger.debug(\"Called _testObjectClause\");\n    \n    var val = null;\n    \n    if (key.length > 0) {\n        var path = key.pop();\n        val = doc[path];\n        \n        this.logger.debug(\"check on field \" + path);\n        \n        // TODO add _.isNumber(val) and treat it as an array\n        if (val) {\n            this.logger.log(val);\n            this.logger.debug(\"going deeper\");\n            \n            return _testObjectClause(clause, val, key);\n        }\n    } else {\n        this.logger.debug(\"lowest path: \" + path);\n        \n        return _testClause(clause, doc);\n    }\n};\n\nvar _testLogicalClause = function(clause, doc, key) {\n    var matches = null;\n    \n    for (let i = 0; i < clause.value.length; i++) {\n        let _matcher = new SelectorMatcher({ clauses: [clause.value[i]] });\n        \n        switch (key) {\n            case \"and\":\n                // True unless it has one that do not match\n                if (_.isNil(matches)) matches = true;\n                \n                if (!_matcher.test(doc)) {\n                    return false;\n                }\n                \n                break;\n            case \"or\":\n                // False unless it has one match at least\n                if (_.isNil(matches)) matches = false;\n                \n                if (_matcher.test(doc)) {\n                    return true;\n                }\n                \n                break;\n        }\n    }\n    \n    return matches || false;\n};\n\nvar _testOperatorClause = function(clause, value) {\n    this.logger.debug(\"Called _testOperatorClause\");\n    \n    for (var key in clause.value) {\n        if (!_testOperatorConstraint(key, clause.value[key], clause.value, value, clause)) {\n            return false;\n        }\n    }\n    \n    return true;\n};\n\nvar _testOperatorConstraint = function (key, operatorValue, clauseValue, docVal, clause) {\n    this.logger.debug(\"Called _testOperatorConstraint\");\n    \n    switch (key) {\n        // Comparison Query Operators\n        case \"$gt\":\n            this.logger.debug(\"testing operator $gt\");\n\n            return SelectorMatcher.cmp(docVal, operatorValue) > 0;\n        case \"$lt\":\n            this.logger.debug(\"testing operator $lt\");\n            \n            return SelectorMatcher.cmp(docVal, operatorValue) < 0;\n        case \"$gte\":\n            this.logger.debug(\"testing operator $gte\");\n            \n            return SelectorMatcher.cmp(docVal, operatorValue) >= 0;\n        case \"$lte\":\n            this.logger.debug(\"testing operator $lte\");\n            \n            return SelectorMatcher.cmp(docVal, operatorValue) <= 0;\n        case \"$eq\":\n            this.logger.debug(\"testing operator $eq\");\n            \n            return SelectorMatcher.equal(docVal, operatorValue);\n        case \"$ne\":\n            this.logger.debug(\"testing operator $ne\");\n            \n            return !SelectorMatcher.equal(docVal, operatorValue);\n        case \"$in\":\n            this.logger.debug(\"testing operator $in\");\n            \n            return SelectorMatcher.in(docVal, operatorValue);\n        case \"$nin\":\n            this.logger.debug(\"testing operator $nin\");\n            \n            return !SelectorMatcher.in(docVal, operatorValue);\n        // Logical Query Operators\n        case \"$not\":\n            this.logger.debug(\"testing operator $not\");\n            \n            // $or, $and, $nor are in the \"operator\" kind treatment\n            /*\n            var _clause = {\n                kind: \"plain\",\n                key: clause.key,\n                value: operatorValue,\n                type: \n            };\n            var _parent = clause.value;\n            var _key = \n            return !(_testClause(_clause, docVal));\n            */\n            // TODO implement\n            throw Error(\"$not unimplemented\");\n        // Element Query Operators\n        case \"$exists\":\n            this.logger.debug(\"testing operator $exists\");\n            \n            return operatorValue ? !_.isUndefined(docVal) : _.isUndefined(docVal);\n        case \"$type\":\n            this.logger.debug(\"testing operator $type\");\n            \n            // $type: 1 is true for an array if any element in the array is of\n            // type 1. but an array doesn\"t have type array unless it contains\n            // an array..\n            // var Selector._f._type(docVal);\n            // return Selector._f._type(docVal).type === operatorValue;\n            throw Error(\"$type unimplemented\");\n        // Evaluation Query Operators\n        case \"$mod\":\n            this.logger.debug(\"testing operator $mod\");\n            \n            return docVal % operatorValue[0] === operatorValue[1];\n        case \"$options\":\n            this.logger.debug(\"testing operator $options (ignored)\");\n            \n            // Ignore, as it is to the RegExp\n            return true;\n        case \"$regex\":\n            this.logger.debug(\"testing operator $regex\");\n            \n            var _opt = null;\n            if (_.hasIn(clauseValue, \"$options\")) {\n                _opt = clauseValue[\"$options\"];\n                \n                if (/[xs]/.test(_opt)) {\n                    //g, i, m, x, s\n                    // TODO mongo uses PCRE and supports some additional flags: \"x\" and\n                    // \"s\". javascript doesn\"t support them. so this is a divergence\n                    // between our behavior and mongo\"s behavior. ideally we would\n                    // implement x and s by transforming the regexp, but not today..\n                    \n                    throw Error(\"Only the i, m, and g regexp options are supported\");\n                }\n            }\n            \n            // Review flags -> g & m\n            var regexp = operatorValue;\n            \n            if (_.isRegExp(regexp) && _.isNil(_opt)) {\n                return regexp.test(docVal);\n            } else if (_.isNil(_opt)) {\n                regexp = new RegExp(regexp);\n            } else if (_.isRegExp(regexp)) {\n                regexp = new RegExp(regexp.source, _opt);\n            } else {\n                regexp = new RegExp(regexp, _opt);\n            }\n            \n            return regexp.test(docVal);\n        case \"$text\":\n            this.logger.debug(\"testing operator $text\");\n            \n            // TODO implement\n            throw Error(\"$text unimplemented\");\n        case \"$where\":\n            this.logger.debug(\"testing operator $where\");\n            \n            // TODO implement\n            throw Error(\"$where unimplemented\");\n        // Geospatial Query Operators\n        // TODO -> in operator kind\n        // Query Operator Array\n        case \"$all\":\n            this.logger.debug(\"testing operator $all\");\n            \n            // return SelectorMatcher.all(operatorValue, docVal) > 0;\n            return SelectorMatcher.all(operatorValue, docVal);\n        case \"$elemMatch\":\n            this.logger.debug(\"testing operator $elemMatch\");\n            \n            // TODO implement\n            throw Error(\"$elemMatch unimplemented\");\n        case \"$size\":\n            this.logger.debug(\"testing operator $size\");\n            \n            return _.isArray(docVal) && docVal.length === operatorValue;\n        // Bitwise Query Operators\n        // TODO\n        default:\n            this.logger.debug(\"testing operator \" + key);\n            \n            throw Error(\"Unrecognized key in selector: \" + key);\n    }\n};\n\nvar BsonTypes = {\n\t_types: [\n\t\t{ alias: \"minKey\", number: -1, order: 1, isType: null },\n\t\t{ alias: \"null\", number: 10, order: 2, isType: null },\n\t\t{ alias: \"int\", number: 16, order: 3, isType: _.isInteger },\n\t\t{ alias: \"long\", number: 18, order: 3, isType: _.isNumber },\n\t\t{ alias: \"double\", number: 1, order: 3, isType: _.isNumber },\n\t\t{ alias: \"number\", number: null, order: 3, isType: _.isNumber },\n\t\t{ alias: \"string\", number: 2, order: 4, isType: _.isString },\n\t\t{ alias: \"symbol\", number: 14, order: 4, isType: _.isSymbol },\n\t\t{ alias: \"object\", number: 3, order: 5, isType: _.isPlainObject },\n\t\t{ alias: \"array\", number: 4, order: 6, isType: _.isArray },\n\t\t{ alias: \"binData\", number: 5, order: 7, isType: null },\n\t\t{ alias: \"objectId\", number: 7, order: 8, isTypefnc: null },\n\t\t{ alias: \"bool\", number: 8, order: 9, isType: _.isBoolean },\n\t\t{ alias: \"date\", number: 9, order: 10, isTypefnc: _.isDate },           // format\n\t\t{ alias: \"timestamp\", number: 17, order: 11, isType: _.isDate },        // format\n\t\t{ alias: \"regex\", number: 11, order: 12, isType: _.isRegExp },\n\t\t{ alias: \"maxKey\", number: 127, order: 13, isType: null }\n\t\t\n// \t\tundefined 6\n// \t\tdbPointer\n// \t\tjavascript\n// \t\tjavascriptWithScope\n// \t\tfunction\n\t],\n\t\n\tgetByAlias: function(alias) {\n\t\tfor (var i = 0; i < this._types.length; i++) {\n\t\t\tif (this._types[i].alias === alias) return this._types[i];\n\t\t}\n\t},\n\tgetByValue: function(val) {\n\t    if (_.isNumber(val)) return this.getByAlias(\"double\");\n        \n        if (_.isString(val)) return this.getByAlias(\"string\");\n        \n        if (_.isBoolean(val)) return this.getByAlias(\"bool\");\n        \n        if (_.isArray(val)) return this.getByAlias(\"array\");\n        \n        if (_.isNull(val)) return this.getByAlias(\"null\");\n        \n        if (_.isRegExp(val)) return this.getByAlias(\"regex\");\n        \n        if (_.isPlainObject(val)) return this.getByAlias(\"object\");\n        \n        if (_.isSymbol(val)) return this.getByAlias(\"symbol\");\n        \n        throw Error(\"Unaccepted BSON type\");\n\t}\n};\n\nexport { SelectorMatcher };"]}