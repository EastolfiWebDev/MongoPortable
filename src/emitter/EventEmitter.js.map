{"version":3,"sources":["emitter/EventEmitter.ts"],"names":[],"mappings":";AAAA,0BAA4B;AAC5B,yCAAuC;AAIvC;IAGI,sBAAY,OAAgB;QACxB,IAAI,CAAC,MAAM,GAAG,sBAAS,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC;IAC3D,CAAC;IAED,2BAAI,GAAJ,UAAK,KAAY,EAAE,IAAW,EAAE,MAA8B;QAC1D,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;QAC7D,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChB,IAAI,GAAG,EAAE,CAAC;YACV,MAAM,GAAG,EAAE,CAAC;QAChB,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAClB,MAAM,GAAkB,IAAI,CAAC;YAC7B,IAAI,GAAG,EAAE,CAAC;QACd,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,4BAAyB,KAAK,OAAG,CAAC,CAAC;QACpD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAExC,0CAA0C;QAC1C,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,UAAA,KAAK;YACnB,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC7B,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC;YACvB,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACL,mBAAC;AAAD,CAhCA,AAgCC,IAAA;AAEQ,oCAAY","file":"EventEmitter.js","sourcesContent":["import * as _ from \"lodash\";\nimport { JSWLogger } from \"jsw-logger\";\n\nimport { Options } from \"../Options\";\n\nclass EventEmitter {\n    protected logger: JSWLogger;\n    \n    constructor(options: Options) {\n        this.logger = JSWLogger.getInstance(options.log || {});\n    }\n    \n    emit(event:string, args:Object, stores: Array<Object|Function>) {\n        if (_.isNil(event) || !_.isString(event)) {\n            throw new Error(\"Parameter \\\"event\\\" must be an string\");\n        }\n        \n        if (_.isNil(args)) {\n            args = {};\n            stores = [];\n        }\n        \n        if (_.isArray(args)) {\n            stores = <Array<Object>>args;\n            args = {};\n        }\n        \n        this.logger.info(`Emitting store event \"${event}\"`);\n        this.logger.debug(JSON.stringify(args));\n    \n        // Send event to all the stores registered\n        _.forEach(stores, store => {\n            if (_.isFunction(store[event])) {\n                store[event](args);\n            }\n        });\n    }\n}\n\nexport { EventEmitter };"]}